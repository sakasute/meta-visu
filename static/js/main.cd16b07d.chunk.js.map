{"version":3,"sources":["ToggleButton/ToggleButton.js","RegisterItem/RegisterItem.js","RegisterAdminItem/RegisterAdminItem.js","SidePanel/SidePanel.js","YearSlider/YearSlider.js","CardHeader/CardHeader.js","InfoBox/InfoBox.js","_js/d3Visualizations/d3imports.js","_js/d3Visualizations/TreeChart.js","_js/d3Visualizations/CategoryTimeline.js","_js/helpers.js","TimelineTreeSVG/TimelineTreeSVG.js","TimelineTreeCard/TimelineTreeCard.js","App/App.js","registerServiceWorker.js","index.js"],"names":["ToggleButton","_ref","children","handleClick","isSelected","mixClasses","type","size","classes","classNames","BASIC","TAG","TEXT","-selected","react_default","a","createElement","className","onClick","RegisterItem","lang","filename","register","toggleRegisterFilter","id","name","en","onChange","checked","htmlFor","RegisterAdminItem","fileFilter","toggleFileFilter","registerFilter","registers","registerItems","Object","keys","map","registerName","src_RegisterItem_RegisterItem","key","concat","registerListClasses","vanish","ToggleButton_ToggleButton","SidePanel","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleMinimize","bind","assertThisInitialized","cohortTitle","fi","keywordTitle","registrarTitle","state","isMinimized","setState","prevState","_this$props","cohortFilter","keywordFilter","treeFilter","toggleCohortFilter","toggleKeywordFilter","selectLang","sidePanel--closed","toggleBtnClasses","sidePanel__toggleControl--rotate","languageSelectors","langOpt","cohortSelectors","values","cohort","langKeywords","keywordSelectors","sort","keyword","registerAdminItems","RegisterAdminItem_RegisterAdminItem","src","alt","Component","YearSlider","handleYearSelection","selectedYears","currentYear","Date","getFullYear","js_default","minValue","maxValue","value","years","onChangeComplete","CardHeader","src_YearSlider_YearSlider","InfoBox","layoutStyles","style","d3imports","select","selectAll","tree","hierarchy","scaleTime","scaleBand","min","max","axisTop","axisBottom","timeYear","TreeChart","data","svgElement","config","width","height","posX","posY","childrenNames","nodeSize","animationDuration","treeHeight","treeWidth","treeLayout","d3","separation","d","findChildArr","treeData","svg","append","attr","sourceCoord","x","y","idCounter","object","childrenName","filter","undefined","nodeGroup","_this2","parent","constructor","calculateLabelPlacement","text","isHarmonized","wrapText","link","_this3","nodesData","descendants","nodeSelection","nodeEnter","enter","moveNodesInPlace","addNodeLabels","exit","remove","_this4","linksData","slice","linkSelection","insert","o","diagonal","s","textSelections","each","word","words","split","reverse","line","dy","parseFloat","dx","tspan","pop","push","join","node","getComputedTextLength","lineHeight","Math","ceil","labelPosition","CategoryTimeline","scaleStartDate","scaleEndDate","xAxisOrientation","showXAxis","showLegend","categories","cohorts","prepareData","xAxisPadding","domain","range","category","paddingInner","round","cohortNum","length","cohortHeight","bandwidth","xAxis","ticks","every","legend","forEach","idx","startDateStr","endDateStr","startDate","endDate","_this$config","sectionData","_this$calculateScaleB","calculateScaleBoundDates","_this$calculateScaleB2","slicedToArray","_this$calculateScaleB3","_this$calculateScaleB4","xCentre","xEndScale","abs","drawXAxis","drawLegend","categoryEnter","i","sectionEnter","calculateSectionXPos","calculateSectionWidth","getTime","createYearLabel","positionYearLabel","timelineData","el","dataArr","startMonth","getMonth","endMonth","startYear","endYear","startStr","endStr","idRef","parseNameFromFilename","replace","TimelineTreeSVG","hasManyCohortsSelected","showInfoBox","hideInfoBox","treeConfigDefault","timelineConfigDefault","infoBoxes","dataProp","_this$props2","treeConfig","timelineConfig","selectedNodes","objectSpread","registerDetails","registerDetail","selectedCohorts","categoryTimelineHeight","registerDetailCount","calculateregisterDetailCount","treeConfigExtended","treeChart","updateNodes","updateLinks","timelineConfigCohorts","timelineConfigExtended","registerNode","registerIdx","notes","isShown","registerDetailNode","registerDetailIdx","timelineConfigModified","filteredCohortData","samplings","sampling","categoryTimeline","moveTo","update","nodeToEmpty","document","querySelector","firstChild","removeChild","_this$props3","infoBoxEls","infoData","styles","position","left","top","InfoBox_InfoBox","infoBoxBtns","onMouseEnter","onMouseLeave","TimelineTreeCard","scaleYearsSlider","scaleYears","mode","console","log","show","_this$state","svgKey","CardHeader_CardHeader","src_TimelineTreeSVG_TimelineTreeSVG","App","updateTreeFilterWithKeyword","resetRegisterDetailFilters","keywords","filenames","dataset","filterMode","infoMsg","url","langParam","searchParams","get","datasetParam","includes","window","history","pushState","registrarData","arguments","registerDetailsIsSelected","initializeRegisterDetails","registerData","URL","location","href","_this$constructor$che","checkURLParams","initializeConfigs","initializeCohortFilter","fetch","then","res","json","dataBundle","initializeKeywordFilter","initializeTreeFilter","initializeRegisters","updatedTreeFilter","registrar","updatedRegistrar","updatedRegister","registerDetailName","updatedRegisterDetail","resetKeywordFilter","defineProperty","$apply","val","$set","toggleKeywordIsSelected","keywordKey","updatedKeywordFilter","keywordIsSelected","registrarKeywordFound","registerKeywordFound","detailName","registerDetailKeywordFound","_this5","_this$state2","timelineTreeCards","nameObj","src_TimelineTreeCard_TimelineTreeCard","Fragment","src_SidePanel_SidePanel","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_App","getElementById","process","origin","addEventListener","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cd16b07d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport \"./ToggleButton.css\";\r\n\r\nexport default function ToggleButton({\r\n  children,\r\n  handleClick,\r\n  isSelected,\r\n  mixClasses,\r\n  size,\r\n  type\r\n}) {\r\n  const TYPES = {\r\n    BASIC: \"toggleButtonBasic\",\r\n    TAG: \"toggleButtonTag\",\r\n    TEXT: \"toggleButtonText\"\r\n  };\r\n\r\n  const classes = classNames(\r\n    \"toggleButton\",\r\n    TYPES[type],\r\n    { \"-selected\": isSelected },\r\n    mixClasses\r\n  );\r\n\r\n  return (\r\n    <button className={classes} type=\"button\" onClick={handleClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./RegisterItem.css\";\r\n\r\nfunction RegisterItem({ lang, filename, register, toggleRegisterFilter }) {\r\n  return (\r\n    <li className=\"registerItem\">\r\n      <input\r\n        id={register.name.en}\r\n        type=\"checkbox\"\r\n        onChange={() => toggleRegisterFilter(filename, register.name.en)}\r\n        checked={register.isSelected}\r\n      />\r\n      <label htmlFor={register.name.en}>{register.name[lang]}</label>\r\n    </li>\r\n  );\r\n}\r\n\r\nRegisterItem.propTypes = {\r\n  lang: PropTypes.string.isRequired,\r\n  register: PropTypes.object.isRequired,\r\n  toggleRegisterFilter: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RegisterItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\r\nimport RegisterItem from \"../RegisterItem/RegisterItem\";\r\n\r\n//import { compareByName } from '../_js/helpers';\r\n\r\nimport \"../_css/simpleList.css\";\r\nimport \"./RegisterAdminItem.css\";\r\n\r\nexport default function RegisterAdminItem({\r\n  fileFilter,\r\n  filename,\r\n  lang,\r\n  toggleFileFilter,\r\n  toggleRegisterFilter\r\n}) {\r\n  const registerFilter = fileFilter.registers;\r\n  const registerItems = Object.keys(registerFilter)\r\n    // .sort((a, b) => compareByName(registerFilter[a], registerFilter[b], lang))\r\n    .map(registerName => (\r\n      <RegisterItem\r\n        lang={lang}\r\n        key={`${fileFilter.name[lang]}/${registerName}`}\r\n        filename={filename}\r\n        toggleRegisterFilter={toggleRegisterFilter}\r\n        register={registerFilter[registerName]}\r\n      />\r\n    ));\r\n\r\n  const registerListClasses = classNames(\r\n    \"simpleList\",\r\n    \"registerList__simpleList\",\r\n    {\r\n      vanish: !fileFilter.isSelected\r\n    }\r\n  );\r\n\r\n  return (\r\n    <li className=\"simpleList__listItem\">\r\n      <ToggleButton\r\n        isSelected={fileFilter.isSelected}\r\n        mixClasses=\"simpleList__button\"\r\n        handleClick={() => toggleFileFilter(filename)}\r\n        type=\"BASIC\"\r\n      >\r\n        {fileFilter.name[lang]}\r\n      </ToggleButton>\r\n      <ul className={registerListClasses}>{registerItems}</ul>\r\n    </li>\r\n  );\r\n}\r\n\r\nRegisterAdminItem.propTypes = {\r\n  lang: PropTypes.string.isRequired,\r\n  filename: PropTypes.string.isRequired,\r\n  fileFilter: PropTypes.object.isRequired,\r\n  toggleFileFilter: PropTypes.func.isRequired,\r\n  toggleRegisterFilter: PropTypes.func.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport RegisterAdminItem from \"../RegisterAdminItem/RegisterAdminItem\";\r\n//import { compareByName } from '../_js/helpers';\r\n\r\nimport \"../_css/simpleList.css\";\r\nimport \"../_css/card.css\";\r\nimport \"./SidePanel.css\";\r\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\r\n\r\nclass SidePanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggleMinimize = this.toggleMinimize.bind(this);\r\n    this.cohortTitle = { en: \"Filter by cohorts:\", fi: \"Suodata kohortteja:\" };\r\n    this.keywordTitle = {\r\n      en: \"Select a keyword...\",\r\n      fi: \"Valitse avainsana...\"\r\n    };\r\n    this.registrarTitle = {\r\n      en: \"...or select a registrar:\",\r\n      fi: \"...tai valitse ylläpitäjä:\"\r\n    };\r\n    this.state = {\r\n      isMinimized: false\r\n    };\r\n  }\r\n\r\n  toggleMinimize() {\r\n    this.setState(prevState => ({ isMinimized: !prevState.isMinimized }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      cohortFilter,\r\n      keywordFilter,\r\n      treeFilter,\r\n      toggleCohortFilter,\r\n      toggleFileFilter,\r\n      toggleKeywordFilter,\r\n      toggleRegisterFilter,\r\n      selectLang,\r\n      lang\r\n    } = this.props;\r\n    const { isMinimized } = this.state;\r\n\r\n    const classes = classNames(\"card\", \"card--strongShadow\", \"sidePanel\", {\r\n      \"sidePanel--closed\": isMinimized\r\n    });\r\n\r\n    const toggleBtnClasses = classNames(\"sidePanel__toggleControl\", {\r\n      \"sidePanel__toggleControl--rotate\": isMinimized\r\n    });\r\n\r\n    const languageSelectors = [\"en\", \"fi\"].map(langOpt => (\r\n      <ToggleButton\r\n        key={langOpt}\r\n        isSelected={lang === langOpt}\r\n        type=\"TEXT\"\r\n        handleClick={() => selectLang(langOpt)}\r\n      >\r\n        {langOpt}\r\n      </ToggleButton>\r\n    ));\r\n\r\n    const cohortSelectors = Object.values(cohortFilter).map(cohort => (\r\n      <ToggleButton\r\n        key={cohort.name}\r\n        isSelected={cohort.isSelected}\r\n        type=\"TAG\"\r\n        handleClick={() => toggleCohortFilter(cohort.name)}\r\n        mixClasses=\"sidePanel__langSelector\"\r\n      >\r\n        {cohort.name}\r\n      </ToggleButton>\r\n    ));\r\n\r\n    const langKeywords = keywordFilter[lang];\r\n    let keywordSelectors = [];\r\n    if (langKeywords) {\r\n      keywordSelectors = Object.keys(langKeywords)\r\n        .sort()\r\n        .map(keyword => {\r\n          const { isSelected } = langKeywords[keyword];\r\n          return (\r\n            <ToggleButton\r\n              key={keyword}\r\n              isSelected={isSelected}\r\n              type=\"TAG\"\r\n              handleClick={() => toggleKeywordFilter(keyword)}\r\n              mixClasses=\"sidePanel__keywordSelector\"\r\n            >\r\n              {keyword}\r\n            </ToggleButton>\r\n          );\r\n        });\r\n    }\r\n\r\n    const registerAdminItems = Object.keys(treeFilter)\r\n      // .sort((a, b) => compareByName(treeFilter[a], treeFilter[b], lang, {\r\n      //   en: 'National Institute for Health and Welfare',\r\n      //   fi: 'THL',\r\n      // }))\r\n      .map(filename => {\r\n        const fileFilter = treeFilter[filename];\r\n        return (\r\n          <RegisterAdminItem\r\n            lang={lang}\r\n            key={filename}\r\n            filename={filename}\r\n            fileFilter={fileFilter}\r\n            toggleFileFilter={toggleFileFilter}\r\n            toggleRegisterFilter={toggleRegisterFilter}\r\n          />\r\n        );\r\n      });\r\n    return (\r\n      <aside className={classes}>\r\n        <div className=\"sidePanel__controls\">\r\n          <div className=\"sidePanel__controlsRow\">\r\n            <div className=\"sidePanel__langControls\">{languageSelectors}</div>\r\n            <button\r\n              type=\"button\"\r\n              className={toggleBtnClasses}\r\n              onClick={this.toggleMinimize}\r\n            >\r\n              <img\r\n                src=\"assets/material-arrow_back.svg\"\r\n                alt=\"register panel toggle\"\r\n              />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"\">\r\n            <h2 className=\"sidePanel__categoryTitle\">\r\n              {this.cohortTitle[lang]}\r\n            </h2>\r\n            <div>{cohortSelectors}</div>\r\n          </div>\r\n          <div className=\"sidePanel__controlsRow\" />\r\n\r\n          <div className=\"\">\r\n            <h2 className=\"sidePanel__categoryTitle\">\r\n              {this.keywordTitle[lang]}\r\n            </h2>\r\n            <div>{keywordSelectors}</div>\r\n            <h2 className=\"sidePanel__categoryTitle sidePanel__categoryTitle--secondary\">\r\n              {this.registrarTitle[lang]}\r\n            </h2>\r\n          </div>\r\n        </div>\r\n\r\n        <ul className=\"simpleList sidePanel__simpleList\">\r\n          {registerAdminItems}\r\n        </ul>\r\n      </aside>\r\n    );\r\n  }\r\n}\r\n\r\nSidePanel.propTypes = {\r\n  lang: PropTypes.string.isRequired,\r\n  treeFilter: PropTypes.object.isRequired,\r\n  toggleFileFilter: PropTypes.func.isRequired,\r\n  toggleRegisterFilter: PropTypes.func.isRequired,\r\n  selectLang: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SidePanel;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputRange from \"react-input-range\";\r\nimport \"react-input-range/lib/css/input-range/input-range.css\";\r\nimport \"./YearSlider.css\";\r\n\r\nfunction YearSlider({ handleYearSelection, selectedYears }) {\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  return (\r\n    <div className=\"yearControl\">\r\n      <InputRange\r\n        className=\"yearControl__slider\"\r\n        minValue={1900}\r\n        maxValue={currentYear}\r\n        value={selectedYears}\r\n        onChange={years => handleYearSelection(years, \"change\")}\r\n        onChangeComplete={years => handleYearSelection(years, \"afterChange\")}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nYearSlider.propTypes = {\r\n  handleYearSelection: PropTypes.func.isRequired,\r\n  selectedYears: PropTypes.object.isRequired\r\n};\r\n\r\nexport default YearSlider;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport YearSlider from \"../YearSlider/YearSlider\";\r\n\r\nfunction CardHeader({ lang, name, handleYearSelection, selectedYears }) {\r\n  return (\r\n    <div className=\"card__header\">\r\n      <h2 className=\"title card__title\">{name[lang]}</h2>\r\n      <div className=\"card__yearControl\">\r\n        <h3 className=\"year-control-title\">Set years:</h3>\r\n        <YearSlider\r\n          handleYearSelection={handleYearSelection}\r\n          selectedYears={selectedYears}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCardHeader.propTypes = {\r\n  lang: PropTypes.string.isRequired,\r\n  name: PropTypes.object.isRequired,\r\n  handleYearSelection: PropTypes.func.isRequired,\r\n  selectedYears: PropTypes.object.isRequired\r\n};\r\n\r\nexport default CardHeader;\r\n","import React from \"react\";\r\nimport \"./InfoBox.css\";\r\n\r\nexport default function InfoBox({ children, layoutStyles }) {\r\n  return (\r\n    <div style={layoutStyles} className=\"infoBox\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import { select, selectAll } from \"d3-selection\";\r\nimport { tree, hierarchy } from \"d3-hierarchy\";\r\nimport { scaleTime, scaleBand } from \"d3-scale\";\r\nimport { min, max } from \"d3-array\";\r\nimport { axisTop, axisBottom } from \"d3-axis\";\r\nimport { timeYear } from \"d3-time\";\r\n\r\nexport default {\r\n  select,\r\n  selectAll,\r\n  tree,\r\n  hierarchy,\r\n  scaleTime,\r\n  scaleBand,\r\n  min,\r\n  max,\r\n  axisTop,\r\n  axisBottom,\r\n  timeYear\r\n};\r\n","import d3 from \"./d3imports\";\r\n\r\nimport \"./TreeChart.css\";\r\n\r\nclass TreeChart {\r\n  constructor(data, svgElement, config) {\r\n    this.config = {\r\n      width: config.width ? config.width : 400,\r\n      height: config.height ? config.height : 200,\r\n      posX: config.posX ? config.posX : 0,\r\n      posY: config.posY ? config.posY : 0,\r\n      childrenNames: config.childrenNames\r\n        ? config.childrenNames\r\n        : [\"registerAdmins\", \"registers\", \"categories\", \"samplings\"],\r\n      nodeSize: config.nodeSize ? config.nodeSize : 10,\r\n      animationDuration: config.animationDuration\r\n        ? config.animationDuration\r\n        : 750,\r\n      lang: config.lang ? config.lang : \"en\"\r\n    };\r\n    const treeHeight = this.config.height;\r\n    const treeWidth = this.config.width;\r\n    const treeLayout = d3\r\n      .tree()\r\n      .size([treeHeight, treeWidth])\r\n      .separation(() => 1); // NOTE: this seems to spread all the leaf nodes equally far apart\r\n\r\n    const hierarchy = d3.hierarchy(data, d => this.findChildArr(d));\r\n\r\n    this.treeData = treeLayout(hierarchy);\r\n\r\n    this.svg = svgElement\r\n      .append(\"g\")\r\n      .attr(\"class\", \"tree\")\r\n      .attr(\"width\", this.config.width)\r\n      .attr(\"height\", this.config.height)\r\n      .attr(\"transform\", `translate(${this.config.posX}, ${this.config.posY})`)\r\n      .append(\"g\");\r\n\r\n    this.sourceCoord = { x: treeHeight / 2, y: 0 };\r\n    this.idCounter = 0;\r\n  }\r\n\r\n  static diagonal(s, d) {\r\n    const path = `M ${s.y} ${s.x}\r\n                  C ${(s.y + d.y) / 2} ${s.x},\r\n                    ${(s.y + d.y) / 2} ${d.x},\r\n                    ${d.y} ${d.x}`;\r\n\r\n    return path;\r\n  }\r\n\r\n  // NOTE: src: https://bl.ocks.org/mbostock/7555321\r\n  static wrapText(textSelections, width) {\r\n    textSelections.each(function wrap() {\r\n      const text = d3.select(this);\r\n      const words = text\r\n        .text()\r\n        .split(/\\s+/)\r\n        .reverse();\r\n      let word;\r\n      let line = [];\r\n      const lineHeight = 1.25;\r\n      const y = text.attr(\"y\");\r\n      const dy = parseFloat(text.attr(\"dy\"));\r\n      const dx = parseFloat(text.attr(\"dx\"));\r\n      let tspan = text\r\n        .text(null)\r\n        .append(\"tspan\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", y)\r\n        .attr(\"dy\", `${dy}em`);\r\n      /* eslint-disable */\r\n      while ((word = words.pop())) {\r\n        line.push(word);\r\n        tspan.text(line.join(\" \"));\r\n        if (tspan.node().getComputedTextLength() > width) {\r\n          line.pop();\r\n          tspan.text(line.join(\" \"));\r\n          line = [word];\r\n          tspan = text\r\n            .append(\"tspan\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", y)\r\n            .attr(\"dy\", lineHeight + \"em\")\r\n            .attr(\"dx\", dx)\r\n            .text(word);\r\n          \r\n        }\r\n      }\r\n      /* eslint enable */\r\n    });\r\n  }\r\n\r\n  static calculateLabelPlacement(d) {\r\n    try {\r\n      if (Math.ceil(d.x) > Math.ceil(d.parent.x)) {\r\n        d.labelPosition = \"under\";\r\n      } else if (Math.ceil(d.x) < Math.ceil(d.parent.x)) {\r\n        d.labelPosition = \"top\";\r\n      } else {\r\n        d.labelPosition = d.parent.labelPosition\r\n          ? d.parent.labelPosition\r\n          : \"top\";\r\n      }\r\n    } finally {\r\n      switch (d.labelPosition) {\r\n        case \"top\":\r\n          return \"-1.75em\";\r\n        case \"under\":\r\n          return \"1.25em\";\r\n        default:\r\n          return \"0em\";\r\n      }\r\n    }\r\n  }\r\n\r\n  findChildArr(object) {\r\n    const childArrNames = this.config.childrenNames;\r\n    const childrenName = childArrNames.filter(\r\n      name => object[name] !== undefined\r\n    )[0];\r\n    if (childrenName !== undefined) {\r\n      return object[childrenName];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  drawNodeCircles(nodeGroup) {\r\n    nodeGroup\r\n      .append(\"circle\")\r\n      .attr(\"class\", \"tree__node-marker\")\r\n      .attr(\"r\", this.config.nodeSize);\r\n  }\r\n\r\n  /* eslint-disable class-methods-use-this */\r\n  moveNodesInPlace(nodeGroup) {\r\n    nodeGroup.attr(\"transform\", d => `translate(${d.y}, ${d.x})`);\r\n  }\r\n\r\n  addNodeLabels(nodeGroup) {\r\n    nodeGroup\r\n      .filter(d => d.parent)\r\n      .append(\"a\")\r\n      .append(\"text\")\r\n      .attr(\"class\", \"tree__node-label\")\r\n      .attr(\"dy\", d => this.constructor.calculateLabelPlacement(d))\r\n      .attr(\"dx\", -15)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text(d =>\r\n        d.data.isHarmonized\r\n          ? d.data.name[this.config.lang] + \" (*)\"\r\n          : d.data.name[this.config.lang]\r\n      )\r\n      .call(this.constructor.wrapText, 175);\r\n\r\n    // add actual links to nodes with URLs\r\n    nodeGroup\r\n      .selectAll(\"a\")\r\n      .filter(d => {\r\n        const link = d.data.link ? d.data.link[this.config.lang] : \"\";\r\n        if (link !== \"\") {\r\n          return true;\r\n        }\r\n      })\r\n      .attr(\"href\", d => d.data.link[this.config.lang])\r\n      .attr(\"rel\", \"noopener noreferrer\")\r\n      .attr(\"target\", \"_blank\")\r\n      .attr(\"class\", \"tree__url-link\");\r\n\r\n    // NOTE: handle root node separately\r\n    nodeGroup.filter(d => !d.parent)\r\n      .append(\"a\")\r\n      .append(\"text\")\r\n      .attr(\"class\", \"tree__node-label\")\r\n      .attr(\"dy\", 0)\r\n      .attr(\"dx\", -35)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text(d =>\r\n        d.data.isHarmonized\r\n          ? d.data.name[this.config.lang] + \" (*)\"\r\n          : d.data.name[this.config.lang]\r\n      )\r\n      .call(this.constructor.wrapText, 50);\r\n  }\r\n\r\n  /* eslint-enable class-methods-use-this */\r\n\r\n  updateNodes() {\r\n    const nodesData = this.treeData.descendants();\r\n    const nodeSelection = this.svg.selectAll(\".node\").data(nodesData, d => {\r\n      const id = d.id ? d.id : this.idCounter;\r\n      d.id = id;\r\n      this.idCounter += 1;\r\n      return id;\r\n    });\r\n\r\n    // enter\r\n    const nodeEnter = nodeSelection\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"tree__node\")\r\n      .attr(\r\n        \"transform\",\r\n        () => `translate(${this.sourceCoord.y}, ${this.sourceCoord.x})`\r\n      );\r\n\r\n    this.moveNodesInPlace(nodeEnter);\r\n    this.addNodeLabels(nodeEnter);\r\n\r\n    // exit\r\n    nodeSelection\r\n      .exit()\r\n      .attr(\r\n        \"transform\",\r\n        `translate(${this.sourceCoord.y}, ${this.sourceCoord.x})`\r\n      )\r\n      .remove();\r\n  }\r\n\r\n  updateLinks() {\r\n    const linksData = this.treeData.descendants().slice(1);\r\n    const linkSelection = this.svg.selectAll(\"path.link\").data(linksData, d => {\r\n      const id = d.id ? d.id : this.idCounter;\r\n      d.id = id;\r\n      this.idCounter += 1;\r\n      return id;\r\n    });\r\n\r\n    // enter\r\n    const linkEnter = linkSelection\r\n      .enter()\r\n      .insert(\"path\", \"g\")\r\n      .attr(\"class\", \"tree__link\")\r\n      .attr(\"d\", () => {\r\n        const o = { x: this.sourceCoord.x, y: this.sourceCoord.y };\r\n        return this.constructor.diagonal(o, o);\r\n      });\r\n\r\n    linkEnter.attr(\"d\", d => this.constructor.diagonal(d, d.parent));\r\n\r\n    // exit\r\n    linkSelection\r\n      .exit()\r\n      .attr(\"d\", () => {\r\n        const o = { y: this.sourceCoord.y, x: this.sourceCoord.x };\r\n        return this.constructor.diagonal(o, o);\r\n      })\r\n      .remove();\r\n  }\r\n}\r\n\r\nexport default TreeChart;\r\n","import d3 from \"./d3imports\";\r\nimport \"./CategoryTimeline.css\";\r\n\r\nclass CategoryTimeline {\r\n  constructor(data, svgElement, config) {\r\n    this.config = {\r\n      width: config.width ? config.width : 400,\r\n      height: config.height ? config.height : 200,\r\n      posX: config.posX ? config.posX : 0,\r\n      posY: config.posY ? config.posY : 0,\r\n      scaleStartDate: config.scaleStartDate\r\n        ? config.scaleStartDate\r\n        : new Date(\"1987-01-01\"),\r\n      scaleEndDate: config.scaleEndDate ? config.scaleEndDate : new Date(),\r\n      xAxisOrientation: config.xAxisOrientation\r\n        ? config.xAxisOrientation\r\n        : \"bottom\",\r\n      showXAxis: config.showXAxis != null ? config.showXAxis : true,\r\n      showLegend: config.showLegend != null ? config.showLegend : true,\r\n      categories: config.categories\r\n        ? config.categories\r\n        : [\r\n            { en: \"parents\", fi: \"vanhemmat\" },\r\n            { en: \"subjects\", fi: \"kohorttilaiset\" }\r\n          ],\r\n      cohorts: config.cohorts ? config.cohorts : [\"1987\", \"1997\"],\r\n      lang: config.lang ? config.lang : \"en\"\r\n    };\r\n    this.data = this.constructor.prepareData(data, this.config);\r\n\r\n    this.xAxisPadding = 30;\r\n\r\n    this.svg = svgElement\r\n      .append(\"g\")\r\n      .attr(\"class\", \"timeline-chart\")\r\n      .attr(\"width\", this.config.width)\r\n      .attr(\"height\", this.config.height + this.xAxisPadding)\r\n      .attr(\"transform\", `translate(${this.config.posX}, ${this.config.posY})`);\r\n\r\n    this.x = d3\r\n      .scaleTime()\r\n      .domain([this.config.scaleStartDate, this.config.scaleEndDate])\r\n      .range([0, this.config.width - 100]);\r\n\r\n    this.y = d3\r\n      .scaleBand()\r\n      .domain(this.config.categories.map(category => category.en))\r\n      .range([this.xAxisPadding, this.config.height])\r\n      .paddingInner(0.1)\r\n      .round(true);\r\n\r\n    this.cohortNum = this.config.cohorts.length;\r\n    this.cohortHeight = this.y.bandwidth() / this.cohortNum;\r\n  }\r\n\r\n  static prepareData(data, config) {\r\n    const timelineData = [];\r\n    config.categories.forEach(category => {\r\n      timelineData.push({\r\n        category,\r\n        data: data.filter(el => el.category.en === category.en)\r\n      });\r\n    });\r\n\r\n    return timelineData;\r\n  }\r\n\r\n  static findEarliestStartDate(dataArr) {\r\n    return d3.min(dataArr, el => new Date(el.startDate));\r\n  }\r\n\r\n  static findLatestEndDate(dataArr) {\r\n    return d3.max(dataArr, el => new Date(el.endDate));\r\n  }\r\n\r\n  static createYearLabel(d) {\r\n    const startDate = new Date(d.startDate);\r\n    const endDate = new Date(d.endDate);\r\n    const startMonth = startDate.getMonth();\r\n    const endMonth = endDate.getMonth();\r\n    const startYear = startDate.getFullYear();\r\n    const endYear = endDate.getFullYear();\r\n\r\n    const startStr =\r\n      startMonth === 0 ? startYear : `${startMonth + 1}/${startYear}`;\r\n    const endStr =\r\n      endMonth === 11 ? endYear : `${endDate.getMonth() + 1}/${endYear}`;\r\n\r\n    if (startYear === endYear) {\r\n      if (startMonth === endMonth) {\r\n        return startStr;\r\n      }\r\n      if (startMonth === 0 && endMonth === 11) {\r\n        return startYear;\r\n      }\r\n    }\r\n\r\n    return `${startStr}—${endStr}`;\r\n  }\r\n\r\n  drawXAxis() {\r\n    let xAxis;\r\n    if (this.config.xAxisOrientation === \"top\") {\r\n      xAxis = d3.axisTop(this.x);\r\n    } else {\r\n      xAxis = d3.axisBottom(this.x);\r\n    }\r\n\r\n    xAxis.ticks(d3.timeYear.every(10));\r\n\r\n    this.svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"timeline__axis\")\r\n      .call(xAxis)\r\n      .attr(\"transform\", () => {\r\n        if (this.config.xAxisOrientation === \"top\") {\r\n          return \"translate(0, -2.5)\";\r\n        }\r\n        return `translate(0, ${this.config.height - this.xAxisPadding + 2.5})`;\r\n      });\r\n  }\r\n\r\n  drawLegend() {\r\n    const legend = this.svg.append(\"g\").attr(\"class\", \"legend\");\r\n    legend.attr(\"transform\", `translate(${this.config.width - 90}, 0)`);\r\n\r\n    this.config.cohorts.forEach((cohort, idx) => {\r\n      const category = legend\r\n        .append(\"g\")\r\n        .attr(\"class\", \"legend__category\")\r\n        .attr(\"transform\", `translate(0, ${idx * this.cohortHeight})`);\r\n\r\n      category\r\n        .append(\"rect\")\r\n        .attr(\"class\", `fill-color-${idx + 1}`)\r\n        .attr(\"width\", this.cohortHeight)\r\n        .attr(\"height\", this.cohortHeight);\r\n\r\n      category\r\n        .append(\"text\")\r\n        .attr(\"class\", \"legend__label\")\r\n        .text(cohort)\r\n        .attr(\r\n          \"transform\",\r\n          `translate(${this.cohortHeight + 5}, ${this.cohortHeight - 5})`\r\n        );\r\n    });\r\n  }\r\n\r\n  calculateScaleBoundDates(startDateStr, endDateStr) {\r\n    let startDate = new Date(startDateStr);\r\n    let endDate = new Date(endDateStr);\r\n    const { scaleStartDate, scaleEndDate } = this.config;\r\n    // NOTE: handle cases where time sections go out of scales\r\n    if (startDate < scaleStartDate) {\r\n      startDate = scaleStartDate;\r\n    } else if (startDate > scaleEndDate) {\r\n      startDate = scaleEndDate;\r\n    }\r\n\r\n    if (endDate > scaleEndDate) {\r\n      endDate = scaleEndDate;\r\n    } else if (endDate < scaleStartDate) {\r\n      endDate = scaleStartDate;\r\n    }\r\n\r\n    return [startDate, endDate];\r\n  }\r\n\r\n  calculateSectionWidth(sectionData) {\r\n    const [startDate, endDate] = this.calculateScaleBoundDates(\r\n      sectionData.startDate,\r\n      sectionData.endDate\r\n    );\r\n\r\n    return this.x(endDate) - this.x(startDate);\r\n  }\r\n\r\n  calculateSectionXPos(sectionData) {\r\n    const startDate = this.calculateScaleBoundDates(sectionData.startDate)[0];\r\n\r\n    return this.x(startDate);\r\n  }\r\n\r\n  positionYearLabel(d) {\r\n    if (\r\n      new Date(d.endDate) < this.config.scaleStartDate ||\r\n      new Date(d.startDate) > this.config.scaleEndDate\r\n    ) {\r\n      // if section is out of scales, throw the label way off screen\r\n      return `translate(${1000}, ${this.cohortHeight - 4})`;\r\n    }\r\n\r\n    const [startDate, endDate] = this.calculateScaleBoundDates(\r\n      d.startDate,\r\n      d.endDate\r\n    );\r\n    const xStart = this.x(startDate);\r\n    const xEnd = this.x(endDate);\r\n    let xCentre = (xStart + xEnd) / 2 - 2;\r\n\r\n    const xEndScale = this.x(this.config.scaleEndDate);\r\n    const limit = 20;\r\n    const offset = 15;\r\n\r\n    xCentre = xCentre < limit ? xCentre + offset : xCentre;\r\n    xCentre =\r\n      Math.abs(xCentre - xEndScale) < limit ? xCentre - offset : xCentre;\r\n\r\n    return `translate(${xCentre}, ${this.cohortHeight - 4})`;\r\n  }\r\n\r\n  moveTo(x, y) {\r\n    this.svg.attr(\"transform\", `translate(${x}, ${y})`);\r\n  }\r\n\r\n  update() {\r\n    if (this.config.showXAxis) {\r\n      this.drawXAxis();\r\n    }\r\n    if (this.config.showLegend) {\r\n      this.drawLegend();\r\n    }\r\n    // enter\r\n    const categoryEnter = this.svg\r\n      .selectAll(\".timeline\")\r\n      .data(this.data)\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"timeline\");\r\n\r\n    categoryEnter.attr(\r\n      \"transform\",\r\n      d => `translate(0, ${this.y(d.category.en) - this.xAxisPadding})`\r\n    );\r\n\r\n    this.config.categories.forEach((category, i) => {\r\n      if (i < this.config.categories.length - 1) {\r\n        categoryEnter\r\n          .filter(d => d.category.en === category.en)\r\n          .append(\"line\")\r\n          .attr(\"class\", \"timeline__separator\")\r\n          .attr(\"x1\", this.x(this.config.scaleStartDate) - 60)\r\n          .attr(\"y1\", this.y.bandwidth() + 0.075 * this.y.bandwidth())\r\n          .attr(\"x2\", this.x(this.config.scaleEndDate))\r\n          .attr(\"y2\", this.y.bandwidth() + 0.075 * this.y.bandwidth());\r\n      }\r\n    });\r\n\r\n    categoryEnter\r\n      .append(\"text\")\r\n      .attr(\"class\", \"timeline__title\")\r\n      .text(d => d.category[this.config.lang])\r\n      .attr(\"text-anchor\", \"end\")\r\n      .attr(\"dy\", this.y.bandwidth() / 2 + 5)\r\n      .attr(\"dx\", \"-1.5em\");\r\n\r\n    const sectionEnter = categoryEnter\r\n      .selectAll(\"timeline__section\")\r\n      .data(d => d.data)\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"timeline__section\");\r\n\r\n    // enter timespan sections => rectangles\r\n    sectionEnter\r\n      .filter(\r\n        d =>\r\n          new Date(d.startDate).getFullYear() !==\r\n          new Date(d.endDate).getFullYear()\r\n      )\r\n      .append(\"rect\")\r\n      .attr(\"class\", \"timeline__rect\")\r\n      .attr(\"x\", d => this.calculateSectionXPos(d))\r\n      .attr(\"height\", this.cohortHeight)\r\n      .attr(\"width\", d => this.calculateSectionWidth(d));\r\n\r\n    // enter point sections => circles\r\n    sectionEnter\r\n      .filter(\r\n        d => new Date(d.startDate).getTime() === new Date(d.endDate).getTime()\r\n      )\r\n      .append(\"circle\")\r\n      .attr(\"r\", d => {\r\n        if (\r\n          new Date(d.startDate) < this.config.scaleStartDate ||\r\n          new Date(d.endDate) > this.config.scaleEndDate\r\n        ) {\r\n          return 0;\r\n        }\r\n        return this.cohortHeight / 2;\r\n      })\r\n      .attr(\"class\", \"timeline__rect\")\r\n      .attr(\"cx\", d => this.calculateSectionXPos(d))\r\n      .attr(\"cy\", this.cohortHeight / 2);\r\n\r\n    sectionEnter\r\n      .append(\"text\")\r\n      .attr(\"class\", \"timeline__year-label\")\r\n      .text(d => this.constructor.createYearLabel(d))\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"transform\", d => this.positionYearLabel(d));\r\n\r\n    // move cohorts to \"own lanes\"\r\n    this.config.cohorts.forEach((cohort, idx) => {\r\n      sectionEnter\r\n        .filter(d => d.cohort === cohort)\r\n        .attr(\"transform\", `translate(0, ${this.cohortHeight * idx})`)\r\n        .select(\".timeline__rect\")\r\n        .attr(\"class\", `timeline__rect fill-color-${idx + 1}`);\r\n    });\r\n  }\r\n}\r\n\r\nexport default CategoryTimeline;\r\n","import CategoryTimeline from \"./d3Visualizations/CategoryTimeline\";\r\n\r\nexport function parseNameFromFilename(filename) {\r\n  return filename.split(\".\")[0];\r\n}\r\n\r\nexport function calculateregisterDetailCount(data) {\r\n  let registerDetailCount = 0;\r\n  data.registers.forEach(register =>\r\n    register.registerDetails.forEach(() => (registerDetailCount += 1))\r\n  );\r\n  return registerDetailCount;\r\n}\r\n\r\nexport function categoryTimelineHelper(samplingData, svg, config) {\r\n  const timelineData = [];\r\n  config.categories.forEach(category => {\r\n    timelineData.push({\r\n      category,\r\n      data: samplingData.filter(el => el.category.en === category.en)\r\n    });\r\n  });\r\n\r\n  return new CategoryTimeline(timelineData, svg, config);\r\n}\r\n\r\n// forcedFirstStr is an optional string that forces a given name placed as\r\n// the first element of the array\r\nexport function compareByName(a, b, lang, forcedFirstStr) {\r\n  if (forcedFirstStr) {\r\n    if (a.name[lang] === forcedFirstStr[lang]) {\r\n      return -1;\r\n    }\r\n    if (b.name[lang] === forcedFirstStr[lang]) {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  if (a.name[lang] < b.name[lang]) {\r\n    return -1;\r\n  }\r\n  if (a.name[lang] > b.name[lang] || b.name[lang]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nexport function idRef(filename) {\r\n  return parseNameFromFilename(filename).replace(/ /g, \"\");\r\n}\r\n\r\nexport function sortTreeData(data) {\r\n  data.registers.sort((a, b) => compareByName(a, b));\r\n  data.registers.forEach(register =>\r\n    register.registerDetails.sort((a, b) => compareByName(a, b))\r\n  );\r\n  return data;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport InfoBox from \"../InfoBox/InfoBox\";\r\n\r\nimport d3 from \"../_js/d3Visualizations/d3imports\";\r\n\r\nimport TreeChart from \"../_js/d3Visualizations/TreeChart\";\r\nimport CategoryTimeline from \"../_js/d3Visualizations/CategoryTimeline\";\r\nimport {\r\n  //sortTreeData,\r\n  calculateregisterDetailCount,\r\n  idRef\r\n} from \"../_js/helpers\";\r\n\r\nimport \"./TimelineTreeSVG.css\";\r\n\r\nclass TimelineTreeSVG extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.hasManyCohortsSelected = Object.values(props.cohortFilter).filter(cohort => cohort.isSelected).length > 4\r\n\r\n    this.showInfoBox = this.showInfoBox.bind(this);\r\n    this.hideInfoBox = this.hideInfoBox.bind(this);\r\n    this.treeConfigDefault = {\r\n      width: 350,\r\n      height: 100,\r\n      posX: 125,\r\n      posY: 50,\r\n      childrenNames: [\"registers\", \"registerDetails\"],\r\n      nodeSize: 7.5\r\n    };\r\n    this.timelineConfigDefault = {\r\n      width: 250,\r\n      height: 100,\r\n      showXAxis: this.hasManyCohortsSelected ? true : false,\r\n      showLegend: this.hasManyCohortsSelected ? true : false,\r\n      xAxisOrientation: this.hasManyCohortsSelected ? \"top\" : \"bottom\",\r\n      scaleEndDate: new Date()\r\n    };\r\n    this.state = {\r\n      infoBoxes: []\r\n    };\r\n  }\r\n\r\n  // FIXME: could/should be broken into smaller pieces\r\n  componentDidMount() {\r\n    const { data: dataProp, lang } = this.props;\r\n    // NOTE: this makes sure that we are not modifying the original data in the App-component\r\n    const {\r\n      filename,\r\n      cohortFilter,\r\n      treeFilter,\r\n      treeConfig,\r\n      timelineConfig\r\n    } = this.props;\r\n\r\n    // ***** TreeChart *****\r\n    const selectedNodes = dataProp.registers\r\n      .filter(register => treeFilter[register.name.en].isSelected)\r\n      .map(register => ({ ...register }));\r\n    // NOTE: the map() above is important step! It replaces the reference to the original register with a copy.\r\n\r\n    selectedNodes.forEach(register => {\r\n      register.registerDetails = register.registerDetails\r\n        .filter(\r\n          registerDetail =>\r\n            treeFilter[register.name.en].registerDetails[registerDetail.name.en]\r\n              .isSelected\r\n        )\r\n        .map(registerDetail => ({ ...registerDetail }));\r\n    });\r\n\r\n    const selectedCohorts = Object.values(cohortFilter).filter(\r\n      cohort => cohort.isSelected\r\n    );\r\n    const cohortNum = selectedCohorts.length;\r\n    const categoryTimelineHeight = 2 * (20 * cohortNum) + 30;\r\n\r\n    const data = { ...dataProp, registers: selectedNodes };\r\n    // data = sortTreeData(data);\r\n    const registerDetailCount = calculateregisterDetailCount(data);\r\n    const treeHeight = registerDetailCount * categoryTimelineHeight;\r\n    this.treeConfigDefault.height = treeHeight;\r\n\r\n    const treeConfigExtended = { ...this.treeConfigDefault, ...treeConfig };\r\n\r\n    const svg = d3\r\n      .select(`.js-timeline-tree#${idRef(filename)}`)\r\n      .attr(\"height\", treeHeight + 100)\r\n      .attr(\"width\", 1050);\r\n\r\n    const treeChart = new TreeChart(data, svg, treeConfigExtended);\r\n    treeChart.updateNodes();\r\n    treeChart.updateLinks();\r\n\r\n    // ***** Timelines *****\r\n    const timelineConfigCohorts = {\r\n      height: categoryTimelineHeight,\r\n      width: 350,\r\n      cohorts: selectedCohorts.map(cohort => cohort.name)\r\n    };\r\n    const timelineConfigExtended = {\r\n      ...this.timelineConfigDefault,\r\n      ...timelineConfig,\r\n      ...timelineConfigCohorts\r\n    };\r\n\r\n    if (treeChart.treeData.children) {\r\n      treeChart.treeData.children.forEach((registerNode, registerIdx) => {\r\n        const { infoBoxes } = this.state;\r\n        registerNode.children\r\n          .filter(node => node.data.notes[lang] !== \"\")\r\n          .forEach(node =>\r\n            infoBoxes.push({\r\n              isShown: false,\r\n              text: node.data.notes,\r\n              x: node.y,\r\n              y: node.x\r\n            })\r\n          );\r\n        this.setState({ infoBoxes });\r\n\r\n        registerNode.children.forEach(\r\n          (registerDetailNode, registerDetailIdx) => {\r\n            let timelineConfigModified = timelineConfigExtended;\r\n\r\n            if (registerIdx === 0 && registerDetailIdx === 0) {\r\n              timelineConfigModified = {\r\n                ...timelineConfigExtended,\r\n                showXAxis: true,\r\n                showLegend: true,\r\n                xAxisOrientation: \"top\"\r\n              };\r\n            }\r\n\r\n            const filteredCohortData = registerDetailNode.data.samplings.filter(\r\n              sampling => cohortFilter[sampling.cohort].isSelected\r\n            );\r\n            const categoryTimeline = new CategoryTimeline(\r\n              filteredCohortData,\r\n              svg,\r\n              timelineConfigModified\r\n            );\r\n            // NOTE: the tree structure kind of swaps x and y coords\r\n            categoryTimeline.moveTo(\r\n              registerDetailNode.y + 300,\r\n              registerDetailNode.x + 50 + 10 - categoryTimelineHeight / 2\r\n            );\r\n            categoryTimeline.update();\r\n          }\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { filename } = this.props;\r\n    const nodeToEmpty = document.querySelector(\r\n      `.js-timeline-tree#${idRef(filename)}`\r\n    );\r\n    while (nodeToEmpty.firstChild) {\r\n      nodeToEmpty.removeChild(nodeToEmpty.firstChild);\r\n    }\r\n  }\r\n\r\n  showInfoBox(idx) {\r\n    const { infoBoxes } = this.state;\r\n    infoBoxes[idx].isShown = true;\r\n    this.setState({ infoBoxes });\r\n  }\r\n\r\n  hideInfoBox(idx) {\r\n    const { infoBoxes } = this.state;\r\n    infoBoxes[idx].isShown = false;\r\n    this.setState({ infoBoxes });\r\n  }\r\n\r\n  render() {\r\n    const { infoBoxes } = this.state;\r\n    const { filename, lang } = this.props;\r\n\r\n    const infoBoxEls = infoBoxes\r\n      .filter(infoData => infoData.isShown)\r\n      .map(infoData => {\r\n        const styles = {\r\n          position: \"absolute\",\r\n          left: `${infoData.x + 125}px`,\r\n          top: `${infoData.y + 60}px`,\r\n          width: \"175px\"\r\n        };\r\n        return (\r\n          <InfoBox\r\n            layoutStyles={styles}\r\n            key={`${Object.values(infoData).join(\"\")}Els`}\r\n          >\r\n            {infoData.text[lang]}\r\n          </InfoBox>\r\n        );\r\n      });\r\n\r\n    const infoBoxBtns = infoBoxes.map((infoData, idx) => {\r\n      const styles = {\r\n        position: \"absolute\",\r\n        left: `${infoData.x + 200}px`,\r\n        top: `${infoData.y + 32}px`\r\n      };\r\n\r\n      return (\r\n        <img\r\n          key={`${Object.values(infoData).join(\"\")}Btns`}\r\n          style={styles}\r\n          className=\"openInfoBtn\"\r\n          src=\"assets/material-info-gray.svg\"\r\n          alt=\"cohort info\"\r\n          onMouseEnter={() => this.showInfoBox(idx)}\r\n          onMouseLeave={() => this.hideInfoBox(idx)}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"svgContainer\">\r\n        <svg id={idRef(filename)} className=\"js-timeline-tree timeline-tree\" />\r\n        {infoBoxBtns}\r\n        {infoBoxEls}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimelineTreeSVG.propTypes = {\r\n  cohortFilter: PropTypes.object.isRequired,\r\n  data: PropTypes.object.isRequired,\r\n  filename: PropTypes.string.isRequired,\r\n  lang: PropTypes.string.isRequired,\r\n  treeFilter: PropTypes.object.isRequired,\r\n  treeConfig: PropTypes.object.isRequired,\r\n  timelineConfig: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TimelineTreeSVG;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport CardHeader from \"../CardHeader/CardHeader\";\r\nimport TimelineTreeSVG from \"../TimelineTreeSVG/TimelineTreeSVG\";\r\nimport \"../_css/card.css\";\r\nimport \"./TimelineTreeCard.css\";\r\n\r\nclass TimelineTreeCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleYearSelection = this.handleYearSelection.bind(this);\r\n    this.state = {\r\n      scaleYearsSlider: { min: 1900, max: 2018 },\r\n      scaleYears: { min: 1900, max: 2018 }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { timelineConfig } = this.props;\r\n    const startYear = timelineConfig.scaleStartDate.getFullYear();\r\n    const currentYear = new Date().getFullYear();\r\n    this.setState({ scaleYearsSlider: { min: startYear, max: currentYear } });\r\n    this.setState({ scaleYears: { min: startYear, max: currentYear } });\r\n  }\r\n\r\n  handleYearSelection(years, mode) {\r\n    const { scaleYearsSlider } = this.state;\r\n    switch (mode) {\r\n      case \"change\":\r\n        this.setState({ scaleYearsSlider: { min: years.min, max: years.max } });\r\n        break;\r\n      case \"afterChange\":\r\n        this.setState({ scaleYears: scaleYearsSlider });\r\n        break;\r\n      default:\r\n        console.log(\"no such event mode\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      lang,\r\n      show,\r\n      filename,\r\n      data,\r\n      cohortFilter,\r\n      fileFilter,\r\n      treeConfig,\r\n      timelineConfig\r\n    } = this.props;\r\n\r\n    const { scaleYearsSlider, scaleYears } = this.state;\r\n    const scaleStartDate = new Date(`${scaleYears.min}-01-01`);\r\n    const scaleEndDate = new Date(`${scaleYears.max}-12-31`);\r\n    const timelineConfigExtended = {\r\n      ...timelineConfig,\r\n      scaleStartDate,\r\n      scaleEndDate\r\n    };\r\n\r\n    const classes = show\r\n      ? \"timeline-tree-wrapper card\"\r\n      : \" timeline-tree-wrapper card card--collapsed\";\r\n    const treeFilter = fileFilter.registers;\r\n    // NOTE: this key updates depending on the filter props to force remounting\r\n    // the TimelineTree with updated filters\r\n    // IDEA: proper solution probably might be to componenDidUpdate() in the svg-component?\r\n    const svgKey =\r\n      Object.values(treeFilter)\r\n        .map(\r\n          register =>\r\n            `${register.isSelected}${Object.values(register.registerDetails)\r\n              .map(registerDetail => registerDetail.isSelected)\r\n              .join(\"\")}`\r\n        )\r\n        .join(\"\") +\r\n      Object.values(cohortFilter)\r\n        .map(cohort => cohort.isSelected)\r\n        .join(\"\") +\r\n      scaleYears.min +\r\n      scaleYears.max +\r\n      lang;\r\n\r\n    const renderSVG = () => {\r\n      if (fileFilter.isSelected) {\r\n        return (\r\n          <TimelineTreeSVG\r\n            lang={lang}\r\n            data={data}\r\n            cohortFilter={cohortFilter}\r\n            treeFilter={treeFilter}\r\n            treeConfig={treeConfig}\r\n            timelineConfig={timelineConfigExtended}\r\n            filename={filename}\r\n            key={svgKey}\r\n          />\r\n        );\r\n      }\r\n      return null;\r\n    };\r\n    return (\r\n      <div className={classes}>\r\n        <CardHeader\r\n          lang={lang}\r\n          name={fileFilter.name}\r\n          selectedYears={scaleYearsSlider}\r\n          handleYearSelection={this.handleYearSelection}\r\n        />\r\n        {renderSVG()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimelineTreeCard.propTypes = {\r\n  lang: PropTypes.string.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n  filename: PropTypes.string.isRequired,\r\n  data: PropTypes.object.isRequired,\r\n  fileFilter: PropTypes.object.isRequired,\r\n  treeConfig: PropTypes.object.isRequired,\r\n  timelineConfig: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TimelineTreeCard;\r\n","import React, { Component } from \"react\";\r\nimport update from \"immutability-helper\";\r\nimport SidePanel from \"../SidePanel/SidePanel\";\r\nimport TimelineTreeCard from \"../TimelineTreeCard/TimelineTreeCard\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  static checkURLParams(url) {\r\n    const langParam = url.searchParams.get(\"lang\");\r\n    const datasetParam = url.searchParams.get(\"ds\");\r\n    let lang = langParam || \"fi\";\r\n    let dataset = datasetParam || \"finnish-birth-cohorts\";\r\n    // defaults\r\n    if ([\"en\", \"fi\"].includes(langParam)) {\r\n      lang = langParam;\r\n    }\r\n    if ([\"finnish-birth-cohorts\", \"psycohorts\"].includes(datasetParam)) {\r\n      dataset = datasetParam;\r\n    }\r\n    window.history.pushState(null, \"\", `?lang=${lang}&ds=${dataset}`); // just changes the url to reflect the state\r\n    return { lang, dataset };\r\n  }\r\n\r\n  static initializeCohortFilter(cohorts) {\r\n    const cohortFilter = {};\r\n    cohorts.forEach((cohort) => {\r\n      cohortFilter[cohort] = { isSelected: true, name: cohort };\r\n    });\r\n    return cohortFilter;\r\n  }\r\n\r\n  static initializeConfigs(dataset) {\r\n    let timelineConfig = {};\r\n    switch (dataset) {\r\n      case \"finnish-birth-cohorts\":\r\n        timelineConfig = {\r\n          cohorts: [\"1987\", \"1997\"],\r\n          scaleStartDate: new Date(\"1987-01-01\"),\r\n        };\r\n        break;\r\n      case \"psycohorts\":\r\n        timelineConfig = {\r\n          cohorts: [\r\n            \"1966\",\r\n            \"1986\",\r\n            \"1987\",\r\n            \"1997\",\r\n            \"FNBCS-81\",\r\n            \"FIPS-ADHD\",\r\n            \"FIPS-ASD\",\r\n            \"FIPS-Tourette\",\r\n            \"FIPS-Conduct dis.\",\r\n            \"FIPS-Anxiety\",\r\n            \"FIPS-Depression\",\r\n            \"FIPS-Schizophrenia\",\r\n            \"FIPS-Bipolar\",\r\n            \"FIPS-Learning dis.\",\r\n            \"FIPS-OCD\",\r\n            \"SSRI\",\r\n            \"SFBC\",\r\n          ],\r\n          scaleStartDate: new Date(\"1966-01-01\"),\r\n        };\r\n        break;\r\n\r\n      default:\r\n        console.log(\"Given dataset was not found!\");\r\n    }\r\n    return timelineConfig;\r\n  }\r\n\r\n  /*\r\n  keywords = {'lang1': [String], 'lang2', [String]...}\r\n  */\r\n  static initializeKeywordFilter(keywords) {\r\n    const keywordFilter = {};\r\n    Object.keys(keywords).forEach((lang) => {\r\n      keywordFilter[lang] = {};\r\n      keywords[lang].forEach((keyword) => {\r\n        keywordFilter[lang][keyword] = { isSelected: false };\r\n      });\r\n    });\r\n\r\n    return keywordFilter;\r\n  }\r\n\r\n  static initializeRegisters(\r\n    registrarData,\r\n    isSelected = true,\r\n    registerDetailsIsSelected = true\r\n  ) {\r\n    const registers = {};\r\n    registrarData.registers.forEach((register) => {\r\n      registers[register.name.en] = {\r\n        name: { ...register.name },\r\n        isSelected,\r\n        keywords: { ...register.keywords },\r\n        registerDetails: this.initializeRegisterDetails(\r\n          register,\r\n          registerDetailsIsSelected\r\n        ),\r\n      };\r\n    });\r\n    return registers;\r\n  }\r\n\r\n  static initializeRegisterDetails(registerData, isSelected = true) {\r\n    const registerDetails = {};\r\n    registerData.registerDetails.forEach((registerDetail) => {\r\n      registerDetails[registerDetail.name.en] = {\r\n        name: { ...registerDetail.name },\r\n        isSelected,\r\n        keywords: { ...registerDetail.keywords },\r\n      };\r\n    });\r\n    return registerDetails;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.selectLang = this.selectLang.bind(this);\r\n    this.updateTreeFilterWithKeyword = this.updateTreeFilterWithKeyword.bind(\r\n      this\r\n    );\r\n    this.toggleCohortFilter = this.toggleCohortFilter.bind(this);\r\n    this.toggleFileFilter = this.toggleFileFilter.bind(this);\r\n    this.toggleKeywordFilter = this.toggleKeywordFilter.bind(this);\r\n    this.toggleRegisterFilter = this.toggleRegisterFilter.bind(this);\r\n    this.resetRegisterDetailFilters = this.resetRegisterDetailFilters.bind(\r\n      this\r\n    );\r\n    this.data = {};\r\n    this.keywords = {};\r\n    this.filenames = [];\r\n    this.state = {\r\n      dataset: \"\",\r\n      filterMode: \"manual\", // 'manual' or 'keywords'\r\n      lang: \"\",\r\n      cohortFilter: {},\r\n      keywordFilter: { en: [], fi: [] },\r\n      treeFilter: {},\r\n      treeConfig: {},\r\n      timelineConfig: {},\r\n      infoMsg: {\r\n        en:\r\n          \"Please select which register adminstrators you want to view from the panel on the left.\",\r\n        fi: \"Valitse haluttu rekisteriylläpitäjä paneelista vasemmalla.\",\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // get starting parameters/configuration from the url\r\n    const url = new URL(window.location.href);\r\n    const { dataset, lang } = this.constructor.checkURLParams(url);\r\n    const timelineConfig = this.constructor.initializeConfigs(dataset, lang);\r\n    const cohortFilter = this.constructor.initializeCohortFilter(\r\n      timelineConfig.cohorts\r\n    );\r\n    fetch(`data/${dataset}/data_bundle.json`)\r\n      .then((res) => res.json())\r\n      .then((dataBundle) => {\r\n        this.data = dataBundle.data;\r\n        this.filenames = Object.keys(this.data);\r\n        this.keywords = dataBundle.keywords;\r\n        const keywordFilter = this.constructor.initializeKeywordFilter(\r\n          dataBundle.keywords\r\n        );\r\n        const treeFilter = this.initializeTreeFilter(this.filenames);\r\n        this.setState({\r\n          cohortFilter,\r\n          dataset,\r\n          keywordFilter,\r\n          treeFilter,\r\n          lang,\r\n          timelineConfig,\r\n        });\r\n      });\r\n  }\r\n\r\n  selectLang(lang) {\r\n    const { dataset } = this.state;\r\n    this.setState({ lang });\r\n    // NOTE: update URL without reloading the page\r\n    window.history.pushState(null, \"\", `?lang=${lang}&ds=${dataset}`); // just changes the url to reflect the state\r\n  }\r\n\r\n  initializeTreeFilter(filenames, isSelected = true) {\r\n    const treeFilter = {};\r\n    filenames.forEach((filename) => {\r\n      treeFilter[filename] = {\r\n        name: { ...this.data[filename].name },\r\n        isSelected: false,\r\n        keywords: { ...this.data[filename].keywords },\r\n        registers: this.constructor.initializeRegisters(\r\n          this.data[filename],\r\n          isSelected\r\n        ),\r\n      };\r\n    });\r\n    return treeFilter;\r\n  }\r\n\r\n  // FIXME: should find a neater way to handle the treeData/filter\r\n  resetRegisterDetailFilters() {\r\n    const { treeFilter } = this.state;\r\n    const updatedTreeFilter = {};\r\n    const filenames = Object.keys(treeFilter);\r\n    filenames.forEach((filename) => {\r\n      const registrar = treeFilter[filename];\r\n      const updatedRegistrar = {\r\n        ...registrar,\r\n        registers: {},\r\n      };\r\n      const registerNames = Object.keys(registrar.registers);\r\n      registerNames.forEach((registerName) => {\r\n        const register = registrar.registers[registerName];\r\n        const updatedRegister = {\r\n          ...register,\r\n          registerDetails: {},\r\n        };\r\n        const registerDetailNames = Object.keys(register.registerDetails);\r\n        registerDetailNames.forEach((registerDetailName) => {\r\n          const registerDetail = register.registerDetails[registerDetailName];\r\n          const updatedRegisterDetail = {\r\n            ...registerDetail,\r\n            isSelected: true,\r\n          };\r\n          updatedRegister.registerDetails[\r\n            registerDetailName\r\n          ] = updatedRegisterDetail;\r\n        });\r\n        updatedRegistrar.registers[registerName] = updatedRegister;\r\n      });\r\n      updatedTreeFilter[filename] = updatedRegistrar;\r\n    });\r\n\r\n    this.setState({ treeFilter: updatedTreeFilter });\r\n  }\r\n\r\n  // NOTE: using immutability-helper to help updating nested states\r\n  toggleFileFilter(filename) {\r\n    const resetKeywordFilter = this.constructor.initializeKeywordFilter(\r\n      this.keywords\r\n    );\r\n    this.setState((prevState) =>\r\n      update(prevState, {\r\n        treeFilter: { [filename]: { isSelected: { $apply: (val) => !val } } },\r\n        keywordFilter: { $set: resetKeywordFilter },\r\n        filterMode: { $set: \"manual\" },\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleRegisterFilter(filename, registerName) {\r\n    const { filterMode } = this.state;\r\n    const resetKeywordFilter = this.constructor.initializeKeywordFilter(\r\n      this.keywords\r\n    );\r\n\r\n    if (filterMode === \"keywords\") {\r\n      this.resetRegisterDetailFilters(filename);\r\n    }\r\n\r\n    this.setState((prevState) =>\r\n      update(prevState, {\r\n        treeFilter: {\r\n          [filename]: {\r\n            registers: {\r\n              [registerName]: {\r\n                isSelected: { $apply: (val) => !val },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        keywordFilter: { $set: resetKeywordFilter },\r\n        filterMode: { $set: \"manual\" },\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleCohortFilter(cohort) {\r\n    this.setState((prevState) =>\r\n      update(prevState, {\r\n        cohortFilter: { [cohort]: { isSelected: { $apply: (val) => !val } } },\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleKeywordFilter(keyword) {\r\n    const { lang, keywordFilter } = this.state;\r\n    const keywordIsSelected = keywordFilter[lang][keyword].isSelected;\r\n    const toggleKeywordIsSelected = !keywordIsSelected;\r\n    // set all keywords as unselected\r\n    Object.keys(keywordFilter[lang]).forEach((keywordKey) => {\r\n      keywordFilter[lang][keywordKey].isSelected = false;\r\n    });\r\n    // set the clicked keyword with updated value\r\n    const updatedKeywordFilter = update(keywordFilter, {\r\n      [lang]: { [keyword]: { isSelected: { $set: toggleKeywordIsSelected } } },\r\n    });\r\n    const updatedTreeFilter = this.updateTreeFilterWithKeyword(\r\n      keyword,\r\n      toggleKeywordIsSelected\r\n    );\r\n    this.setState({\r\n      keywordFilter: updatedKeywordFilter,\r\n      treeFilter: updatedTreeFilter,\r\n      filterMode: \"keywords\",\r\n    });\r\n  }\r\n\r\n  // FIXME: quite an ugly function\r\n  updateTreeFilterWithKeyword(keyword, keywordIsSelected) {\r\n    const { lang } = this.state;\r\n    if (!keywordIsSelected) {\r\n      return this.initializeTreeFilter(this.filenames);\r\n    }\r\n    const updatedTreeFilter = this.initializeTreeFilter(this.filenames, false);\r\n    Object.keys(updatedTreeFilter).forEach((filename) => {\r\n      const registrar = updatedTreeFilter[filename];\r\n      const registrarKeywordFound = registrar.keywords[lang].includes(keyword);\r\n      registrar.isSelected = registrarKeywordFound;\r\n      if (registrarKeywordFound) {\r\n        Object.keys(registrar.registers).forEach((registerName) => {\r\n          const register = registrar.registers[registerName];\r\n          const registerKeywordFound = register.keywords[lang].includes(\r\n            keyword\r\n          );\r\n          register.isSelected = registerKeywordFound;\r\n          if (registerKeywordFound) {\r\n            Object.keys(register.registerDetails).forEach((detailName) => {\r\n              const registerDetail = register.registerDetails[detailName];\r\n              const registerDetailKeywordFound = registerDetail.keywords[\r\n                lang\r\n              ].includes(keyword);\r\n              registerDetail.isSelected = registerDetailKeywordFound;\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return updatedTreeFilter;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      cohortFilter,\r\n      keywordFilter,\r\n      treeFilter,\r\n      lang,\r\n      infoMsg,\r\n      treeConfig,\r\n      timelineConfig,\r\n    } = this.state;\r\n\r\n    const timelineTreeCards = this.filenames\r\n      .map((filename) => ({ filename, name: treeFilter[filename].name }))\r\n      .map((nameObj) => {\r\n        const { filename } = nameObj;\r\n        const fileFilter = treeFilter[filename];\r\n        return (\r\n          <TimelineTreeCard\r\n            lang={lang}\r\n            show={treeFilter[filename].isSelected}\r\n            filename={filename}\r\n            data={this.data[filename]}\r\n            cohortFilter={cohortFilter}\r\n            fileFilter={fileFilter}\r\n            treeConfig={{ ...treeConfig, lang }}\r\n            timelineConfig={{ ...timelineConfig, lang }}\r\n            key={filename}\r\n          />\r\n        );\r\n      });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <SidePanel\r\n          lang={lang}\r\n          cohortFilter={cohortFilter}\r\n          keywordFilter={keywordFilter}\r\n          treeFilter={treeFilter}\r\n          selectLang={this.selectLang}\r\n          toggleCohortFilter={this.toggleCohortFilter}\r\n          toggleFileFilter={this.toggleFileFilter}\r\n          toggleKeywordFilter={this.toggleKeywordFilter}\r\n          toggleRegisterFilter={this.toggleRegisterFilter}\r\n        />\r\n        <div className=\"content-wrapper\">\r\n          <div className=\"sidebar-placeholder\" />\r\n          <main className=\"chart-area\">\r\n            <h2 className=\"info-header\">{infoMsg[lang]}</h2>\r\n            {timelineTreeCards}\r\n          </main>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App/App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}