{"version":3,"sources":["ToggleButton/ToggleButton.js","RegisterItem/RegisterItem.js","RegisterAdminItem/RegisterAdminItem.js","SidePanel/SidePanel.js","YearSlider/YearSlider.js","CardHeader/CardHeader.js","InfoBox/InfoBox.js","_js/d3Visualizations/d3imports.js","_js/d3Visualizations/TreeChart.js","_js/d3Visualizations/CategoryTimeline.js","_js/helpers.js","TimelineTreeSVG/TimelineTreeSVG.js","TimelineTreeCard/TimelineTreeCard.js","App/App.js","registerServiceWorker.js","index.js"],"names":["ToggleButton","_ref","children","handleClick","isSelected","mixClasses","type","size","classes","classNames","BASIC","TAG","TEXT","-selected","react_default","a","createElement","className","onClick","RegisterItem","lang","filename","register","toggleRegisterFilter","id","name","en","onChange","checked","htmlFor","RegisterAdminItem","fileFilter","toggleFileFilter","registerFilter","registers","registerItems","Object","keys","map","registerName","src_RegisterItem_RegisterItem","key","concat","registerListClasses","vanish","ToggleButton_ToggleButton","SidePanel","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleMinimize","bind","assertThisInitialized","cohortTitle","fi","keywordTitle","registrarTitle","state","isMinimized","setState","prevState","_this$props","cohortFilter","keywordFilter","treeFilter","toggleCohortFilter","toggleKeywordFilter","selectLang","sidePanel--closed","toggleBtnClasses","sidePanel__toggleControl--rotate","languageSelectors","langOpt","cohortSelectors","values","cohort","langKeywords","keywordSelectors","sort","keyword","registerAdminItems","RegisterAdminItem_RegisterAdminItem","src","alt","Component","YearSlider","handleYearSelection","selectedYears","currentYear","Date","getFullYear","js_default","minValue","maxValue","value","years","onChangeComplete","CardHeader","src_YearSlider_YearSlider","InfoBox","layoutStyles","style","d3imports","select","selectAll","tree","hierarchy","scaleTime","scaleBand","min","max","axisTop","axisBottom","timeYear","TreeChart","data","svgElement","config","width","height","posX","posY","childrenNames","nodeSize","animationDuration","treeHeight","treeWidth","treeLayout","d3","separation","d","findChildArr","treeData","svg","append","attr","sourceCoord","x","y","idCounter","object","childrenName","filter","undefined","nodeGroup","_this2","parent","constructor","calculateLabelPlacement","text","isHarmonized","wrapText","link","_this3","nodesData","descendants","nodeSelection","nodeEnter","enter","moveNodesInPlace","addNodeLabels","exit","remove","_this4","linksData","slice","linkSelection","insert","o","diagonal","s","textSelections","each","word","words","split","reverse","line","dy","parseFloat","dx","tspan","pop","push","join","node","getComputedTextLength","lineHeight","Math","ceil","labelPosition","CategoryTimeline","scaleStartDate","scaleEndDate","xAxisOrientation","showXAxis","showLegend","categories","cohorts","prepareData","xAxisPadding","domain","range","category","paddingInner","round","cohortNum","length","cohortHeight","bandwidth","xAxis","ticks","every","legend","forEach","idx","startDateStr","endDateStr","startDate","endDate","_this$config","sectionData","_this$calculateScaleB","calculateScaleBoundDates","_this$calculateScaleB2","slicedToArray","_this$calculateScaleB3","_this$calculateScaleB4","xCentre","xEndScale","abs","drawXAxis","drawLegend","categoryEnter","i","sectionEnter","calculateSectionXPos","calculateSectionWidth","getTime","createYearLabel","positionYearLabel","timelineData","el","dataArr","startMonth","getMonth","endMonth","startYear","endYear","startStr","endStr","idRef","parseNameFromFilename","replace","TimelineTreeSVG","hasManyCohortsSelected","showInfoBox","hideInfoBox","treeConfigDefault","timelineConfigDefault","infoBoxes","dataProp","_this$props2","treeConfig","timelineConfig","selectedNodes","objectSpread","registerDetails","registerDetail","selectedCohorts","categoryTimelineHeight","registerDetailCount","calculateregisterDetailCount","treeConfigExtended","treeChart","updateNodes","updateLinks","timelineConfigCohorts","timelineConfigExtended","registerNode","registerIdx","notes","isShown","registerDetailNode","registerDetailIdx","timelineConfigModified","filteredCohortData","samplings","sampling","categoryTimeline","moveTo","update","nodeToEmpty","document","querySelector","firstChild","removeChild","_this$props3","infoBoxEls","infoData","styles","position","left","top","InfoBox_InfoBox","infoBoxBtns","onMouseEnter","onMouseLeave","TimelineTreeCard","scaleYearsSlider","scaleYears","mode","console","log","show","_this$state","svgKey","CardHeader_CardHeader","src_TimelineTreeSVG_TimelineTreeSVG","App","updateTreeFilterWithKeyword","resetRegisterDetailFilters","keywords","filenames","dataset","filterMode","infoMsg","url","langParam","searchParams","get","datasetParam","includes","window","history","pushState","registrarData","arguments","registerDetailsIsSelected","initializeRegisterDetails","registerData","URL","location","href","_this$constructor$che","checkURLParams","initializeConfigs","initializeCohortFilter","fetch","then","res","json","dataBundle","initializeKeywordFilter","initializeTreeFilter","initializeRegisters","updatedTreeFilter","registrar","updatedRegistrar","updatedRegister","registerDetailName","updatedRegisterDetail","resetKeywordFilter","defineProperty","$apply","val","$set","toggleKeywordIsSelected","keywordKey","updatedKeywordFilter","keywordIsSelected","registrarKeywordFound","registerKeywordFound","detailName","registerDetailKeywordFound","_this5","_this$state2","timelineTreeCards","nameObj","src_TimelineTreeCard_TimelineTreeCard","Fragment","src_SidePanel_SidePanel","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_App","getElementById","process","origin","addEventListener","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a96733e0.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./ToggleButton.css\";\n\nexport default function ToggleButton({\n  children,\n  handleClick,\n  isSelected,\n  mixClasses,\n  size,\n  type\n}) {\n  const TYPES = {\n    BASIC: \"toggleButtonBasic\",\n    TAG: \"toggleButtonTag\",\n    TEXT: \"toggleButtonText\"\n  };\n\n  const classes = classNames(\n    \"toggleButton\",\n    TYPES[type],\n    { \"-selected\": isSelected },\n    mixClasses\n  );\n\n  return (\n    <button className={classes} type=\"button\" onClick={handleClick}>\n      {children}\n    </button>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./RegisterItem.css\";\n\nfunction RegisterItem({ lang, filename, register, toggleRegisterFilter }) {\n  return (\n    <li className=\"registerItem\">\n      <input\n        id={register.name.en}\n        type=\"checkbox\"\n        onChange={() => toggleRegisterFilter(filename, register.name.en)}\n        checked={register.isSelected}\n      />\n      <label htmlFor={register.name.en}>{register.name[lang]}</label>\n    </li>\n  );\n}\n\nRegisterItem.propTypes = {\n  lang: PropTypes.string.isRequired,\n  register: PropTypes.object.isRequired,\n  toggleRegisterFilter: PropTypes.func.isRequired\n};\n\nexport default RegisterItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\nimport RegisterItem from \"../RegisterItem/RegisterItem\";\n\n//import { compareByName } from '../_js/helpers';\n\nimport \"../_css/simpleList.css\";\nimport \"./RegisterAdminItem.css\";\n\nexport default function RegisterAdminItem({\n  fileFilter,\n  filename,\n  lang,\n  toggleFileFilter,\n  toggleRegisterFilter\n}) {\n  const registerFilter = fileFilter.registers;\n  const registerItems = Object.keys(registerFilter)\n    // .sort((a, b) => compareByName(registerFilter[a], registerFilter[b], lang))\n    .map(registerName => (\n      <RegisterItem\n        lang={lang}\n        key={`${fileFilter.name[lang]}/${registerName}`}\n        filename={filename}\n        toggleRegisterFilter={toggleRegisterFilter}\n        register={registerFilter[registerName]}\n      />\n    ));\n\n  const registerListClasses = classNames(\n    \"simpleList\",\n    \"registerList__simpleList\",\n    {\n      vanish: !fileFilter.isSelected\n    }\n  );\n\n  return (\n    <li className=\"simpleList__listItem\">\n      <ToggleButton\n        isSelected={fileFilter.isSelected}\n        mixClasses=\"simpleList__button\"\n        handleClick={() => toggleFileFilter(filename)}\n        type=\"BASIC\"\n      >\n        {fileFilter.name[lang]}\n      </ToggleButton>\n      <ul className={registerListClasses}>{registerItems}</ul>\n    </li>\n  );\n}\n\nRegisterAdminItem.propTypes = {\n  lang: PropTypes.string.isRequired,\n  filename: PropTypes.string.isRequired,\n  fileFilter: PropTypes.object.isRequired,\n  toggleFileFilter: PropTypes.func.isRequired,\n  toggleRegisterFilter: PropTypes.func.isRequired\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport RegisterAdminItem from \"../RegisterAdminItem/RegisterAdminItem\";\n//import { compareByName } from '../_js/helpers';\n\nimport \"../_css/simpleList.css\";\nimport \"../_css/card.css\";\nimport \"./SidePanel.css\";\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\n\nclass SidePanel extends Component {\n  constructor(props) {\n    super(props);\n    this.toggleMinimize = this.toggleMinimize.bind(this);\n    this.cohortTitle = { en: \"Filter by cohorts:\", fi: \"Suodata kohortteja:\" };\n    this.keywordTitle = {\n      en: \"Select a keyword...\",\n      fi: \"Valitse avainsana...\"\n    };\n    this.registrarTitle = {\n      en: \"...or select a registrar:\",\n      fi: \"...tai valitse ylläpitäjä:\"\n    };\n    this.state = {\n      isMinimized: false\n    };\n  }\n\n  toggleMinimize() {\n    this.setState(prevState => ({ isMinimized: !prevState.isMinimized }));\n  }\n\n  render() {\n    const {\n      cohortFilter,\n      keywordFilter,\n      treeFilter,\n      toggleCohortFilter,\n      toggleFileFilter,\n      toggleKeywordFilter,\n      toggleRegisterFilter,\n      selectLang,\n      lang\n    } = this.props;\n    const { isMinimized } = this.state;\n\n    const classes = classNames(\"card\", \"card--strongShadow\", \"sidePanel\", {\n      \"sidePanel--closed\": isMinimized\n    });\n\n    const toggleBtnClasses = classNames(\"sidePanel__toggleControl\", {\n      \"sidePanel__toggleControl--rotate\": isMinimized\n    });\n\n    const languageSelectors = [\"en\", \"fi\"].map(langOpt => (\n      <ToggleButton\n        key={langOpt}\n        isSelected={lang === langOpt}\n        type=\"TEXT\"\n        handleClick={() => selectLang(langOpt)}\n      >\n        {langOpt}\n      </ToggleButton>\n    ));\n\n    const cohortSelectors = Object.values(cohortFilter).map(cohort => (\n      <ToggleButton\n        key={cohort.name}\n        isSelected={cohort.isSelected}\n        type=\"TAG\"\n        handleClick={() => toggleCohortFilter(cohort.name)}\n        mixClasses=\"sidePanel__langSelector\"\n      >\n        {cohort.name}\n      </ToggleButton>\n    ));\n\n    const langKeywords = keywordFilter[lang];\n    let keywordSelectors = [];\n    if (langKeywords) {\n      keywordSelectors = Object.keys(langKeywords)\n        .sort()\n        .map(keyword => {\n          const { isSelected } = langKeywords[keyword];\n          return (\n            <ToggleButton\n              key={keyword}\n              isSelected={isSelected}\n              type=\"TAG\"\n              handleClick={() => toggleKeywordFilter(keyword)}\n              mixClasses=\"sidePanel__keywordSelector\"\n            >\n              {keyword}\n            </ToggleButton>\n          );\n        });\n    }\n\n    const registerAdminItems = Object.keys(treeFilter)\n      // .sort((a, b) => compareByName(treeFilter[a], treeFilter[b], lang, {\n      //   en: 'National Institute for Health and Welfare',\n      //   fi: 'THL',\n      // }))\n      .map(filename => {\n        const fileFilter = treeFilter[filename];\n        return (\n          <RegisterAdminItem\n            lang={lang}\n            key={filename}\n            filename={filename}\n            fileFilter={fileFilter}\n            toggleFileFilter={toggleFileFilter}\n            toggleRegisterFilter={toggleRegisterFilter}\n          />\n        );\n      });\n    return (\n      <aside className={classes}>\n        <div className=\"sidePanel__controls\">\n          <div className=\"sidePanel__controlsRow\">\n            <div className=\"sidePanel__langControls\">{languageSelectors}</div>\n            <button\n              type=\"button\"\n              className={toggleBtnClasses}\n              onClick={this.toggleMinimize}\n            >\n              <img\n                src=\"assets/material-arrow_back.svg\"\n                alt=\"register panel toggle\"\n              />\n            </button>\n          </div>\n\n          <div className=\"\">\n            <h2 className=\"sidePanel__categoryTitle\">\n              {this.cohortTitle[lang]}\n            </h2>\n            <div>{cohortSelectors}</div>\n          </div>\n          <div className=\"sidePanel__controlsRow\" />\n\n          <div className=\"\">\n            <h2 className=\"sidePanel__categoryTitle\">\n              {this.keywordTitle[lang]}\n            </h2>\n            <div>{keywordSelectors}</div>\n            <h2 className=\"sidePanel__categoryTitle sidePanel__categoryTitle--secondary\">\n              {this.registrarTitle[lang]}\n            </h2>\n          </div>\n        </div>\n\n        <ul className=\"simpleList sidePanel__simpleList\">\n          {registerAdminItems}\n        </ul>\n      </aside>\n    );\n  }\n}\n\nSidePanel.propTypes = {\n  lang: PropTypes.string.isRequired,\n  treeFilter: PropTypes.object.isRequired,\n  toggleFileFilter: PropTypes.func.isRequired,\n  toggleRegisterFilter: PropTypes.func.isRequired,\n  selectLang: PropTypes.func.isRequired\n};\n\nexport default SidePanel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport InputRange from \"react-input-range\";\nimport \"react-input-range/lib/css/input-range/input-range.css\";\nimport \"./YearSlider.css\";\n\nfunction YearSlider({ handleYearSelection, selectedYears }) {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <div className=\"yearControl\">\n      <InputRange\n        className=\"yearControl__slider\"\n        minValue={1900}\n        maxValue={currentYear}\n        value={selectedYears}\n        onChange={years => handleYearSelection(years, \"change\")}\n        onChangeComplete={years => handleYearSelection(years, \"afterChange\")}\n      />\n    </div>\n  );\n}\n\nYearSlider.propTypes = {\n  handleYearSelection: PropTypes.func.isRequired,\n  selectedYears: PropTypes.object.isRequired\n};\n\nexport default YearSlider;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport YearSlider from \"../YearSlider/YearSlider\";\n\nfunction CardHeader({ lang, name, handleYearSelection, selectedYears }) {\n  return (\n    <div className=\"card__header\">\n      <h2 className=\"title card__title\">{name[lang]}</h2>\n      <div className=\"card__yearControl\">\n        <h3 className=\"year-control-title\">Set years:</h3>\n        <YearSlider\n          handleYearSelection={handleYearSelection}\n          selectedYears={selectedYears}\n        />\n      </div>\n    </div>\n  );\n}\n\nCardHeader.propTypes = {\n  lang: PropTypes.string.isRequired,\n  name: PropTypes.object.isRequired,\n  handleYearSelection: PropTypes.func.isRequired,\n  selectedYears: PropTypes.object.isRequired\n};\n\nexport default CardHeader;\n","import React from \"react\";\nimport \"./InfoBox.css\";\n\nexport default function InfoBox({ children, layoutStyles }) {\n  return (\n    <div style={layoutStyles} className=\"infoBox\">\n      {children}\n    </div>\n  );\n}\n","import { select, selectAll } from \"d3-selection\";\nimport { tree, hierarchy } from \"d3-hierarchy\";\nimport { scaleTime, scaleBand } from \"d3-scale\";\nimport { min, max } from \"d3-array\";\nimport { axisTop, axisBottom } from \"d3-axis\";\nimport { timeYear } from \"d3-time\";\n\nexport default {\n  select,\n  selectAll,\n  tree,\n  hierarchy,\n  scaleTime,\n  scaleBand,\n  min,\n  max,\n  axisTop,\n  axisBottom,\n  timeYear\n};\n","import d3 from \"./d3imports\";\n\nimport \"./TreeChart.css\";\n\nclass TreeChart {\n  constructor(data, svgElement, config) {\n    this.config = {\n      width: config.width ? config.width : 400,\n      height: config.height ? config.height : 200,\n      posX: config.posX ? config.posX : 0,\n      posY: config.posY ? config.posY : 0,\n      childrenNames: config.childrenNames\n        ? config.childrenNames\n        : [\"registerAdmins\", \"registers\", \"categories\", \"samplings\"],\n      nodeSize: config.nodeSize ? config.nodeSize : 10,\n      animationDuration: config.animationDuration\n        ? config.animationDuration\n        : 750,\n      lang: config.lang ? config.lang : \"en\"\n    };\n    const treeHeight = this.config.height;\n    const treeWidth = this.config.width;\n    const treeLayout = d3\n      .tree()\n      .size([treeHeight, treeWidth])\n      .separation(() => 1); // NOTE: this seems to spread all the leaf nodes equally far apart\n\n    const hierarchy = d3.hierarchy(data, d => this.findChildArr(d));\n\n    this.treeData = treeLayout(hierarchy);\n\n    this.svg = svgElement\n      .append(\"g\")\n      .attr(\"class\", \"tree\")\n      .attr(\"width\", this.config.width)\n      .attr(\"height\", this.config.height)\n      .attr(\"transform\", `translate(${this.config.posX}, ${this.config.posY})`)\n      .append(\"g\");\n\n    this.sourceCoord = { x: treeHeight / 2, y: 0 };\n    this.idCounter = 0;\n  }\n\n  static diagonal(s, d) {\n    const path = `M ${s.y} ${s.x}\n                  C ${(s.y + d.y) / 2} ${s.x},\n                    ${(s.y + d.y) / 2} ${d.x},\n                    ${d.y} ${d.x}`;\n\n    return path;\n  }\n\n  // NOTE: src: https://bl.ocks.org/mbostock/7555321\n  static wrapText(textSelections, width) {\n    textSelections.each(function wrap() {\n      const text = d3.select(this);\n      const words = text\n        .text()\n        .split(/\\s+/)\n        .reverse();\n      let word;\n      let line = [];\n      const lineHeight = 1.25;\n      const y = text.attr(\"y\");\n      const dy = parseFloat(text.attr(\"dy\"));\n      const dx = parseFloat(text.attr(\"dx\"));\n      let tspan = text\n        .text(null)\n        .append(\"tspan\")\n        .attr(\"x\", 0)\n        .attr(\"y\", y)\n        .attr(\"dy\", `${dy}em`);\n      /* eslint-disable */\n      while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(\" \"));\n        if (tspan.node().getComputedTextLength() > width) {\n          line.pop();\n          tspan.text(line.join(\" \"));\n          line = [word];\n          tspan = text\n            .append(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", y)\n            .attr(\"dy\", lineHeight + \"em\")\n            .attr(\"dx\", dx)\n            .text(word);\n          \n        }\n      }\n      /* eslint enable */\n    });\n  }\n\n  static calculateLabelPlacement(d) {\n    try {\n      if (Math.ceil(d.x) > Math.ceil(d.parent.x)) {\n        d.labelPosition = \"under\";\n      } else if (Math.ceil(d.x) < Math.ceil(d.parent.x)) {\n        d.labelPosition = \"top\";\n      } else {\n        d.labelPosition = d.parent.labelPosition\n          ? d.parent.labelPosition\n          : \"top\";\n      }\n    } finally {\n      switch (d.labelPosition) {\n        case \"top\":\n          return \"-1.75em\";\n        case \"under\":\n          return \"1.25em\";\n        default:\n          return \"0em\";\n      }\n    }\n  }\n\n  findChildArr(object) {\n    const childArrNames = this.config.childrenNames;\n    const childrenName = childArrNames.filter(\n      name => object[name] !== undefined\n    )[0];\n    if (childrenName !== undefined) {\n      return object[childrenName];\n    }\n    return null;\n  }\n\n  drawNodeCircles(nodeGroup) {\n    nodeGroup\n      .append(\"circle\")\n      .attr(\"class\", \"tree__node-marker\")\n      .attr(\"r\", this.config.nodeSize);\n  }\n\n  /* eslint-disable class-methods-use-this */\n  moveNodesInPlace(nodeGroup) {\n    nodeGroup.attr(\"transform\", d => `translate(${d.y}, ${d.x})`);\n  }\n\n  addNodeLabels(nodeGroup) {\n    nodeGroup\n      .filter(d => d.parent)\n      .append(\"a\")\n      .append(\"text\")\n      .attr(\"class\", \"tree__node-label\")\n      .attr(\"dy\", d => this.constructor.calculateLabelPlacement(d))\n      .attr(\"dx\", -15)\n      .attr(\"text-anchor\", \"middle\")\n      .text(d =>\n        d.data.isHarmonized\n          ? d.data.name[this.config.lang] + \" (*)\"\n          : d.data.name[this.config.lang]\n      )\n      .call(this.constructor.wrapText, 175);\n\n    // add actual links to nodes with URLs\n    nodeGroup\n      .selectAll(\"a\")\n      .filter(d => {\n        const link = d.data.link ? d.data.link[this.config.lang] : \"\";\n        if (link !== \"\") {\n          return true;\n        }\n      })\n      .attr(\"href\", d => d.data.link[this.config.lang])\n      .attr(\"rel\", \"noopener noreferrer\")\n      .attr(\"target\", \"_blank\")\n      .attr(\"class\", \"tree__url-link\");\n\n    // NOTE: handle root node separately\n    nodeGroup.filter(d => !d.parent)\n      .append(\"a\")\n      .append(\"text\")\n      .attr(\"class\", \"tree__node-label\")\n      .attr(\"dy\", 0)\n      .attr(\"dx\", -35)\n      .attr(\"text-anchor\", \"middle\")\n      .text(d =>\n        d.data.isHarmonized\n          ? d.data.name[this.config.lang] + \" (*)\"\n          : d.data.name[this.config.lang]\n      )\n      .call(this.constructor.wrapText, 50);\n  }\n\n  /* eslint-enable class-methods-use-this */\n\n  updateNodes() {\n    const nodesData = this.treeData.descendants();\n    const nodeSelection = this.svg.selectAll(\".node\").data(nodesData, d => {\n      const id = d.id ? d.id : this.idCounter;\n      d.id = id;\n      this.idCounter += 1;\n      return id;\n    });\n\n    // enter\n    const nodeEnter = nodeSelection\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"tree__node\")\n      .attr(\n        \"transform\",\n        () => `translate(${this.sourceCoord.y}, ${this.sourceCoord.x})`\n      );\n\n    this.moveNodesInPlace(nodeEnter);\n    this.addNodeLabels(nodeEnter);\n\n    // exit\n    nodeSelection\n      .exit()\n      .attr(\n        \"transform\",\n        `translate(${this.sourceCoord.y}, ${this.sourceCoord.x})`\n      )\n      .remove();\n  }\n\n  updateLinks() {\n    const linksData = this.treeData.descendants().slice(1);\n    const linkSelection = this.svg.selectAll(\"path.link\").data(linksData, d => {\n      const id = d.id ? d.id : this.idCounter;\n      d.id = id;\n      this.idCounter += 1;\n      return id;\n    });\n\n    // enter\n    const linkEnter = linkSelection\n      .enter()\n      .insert(\"path\", \"g\")\n      .attr(\"class\", \"tree__link\")\n      .attr(\"d\", () => {\n        const o = { x: this.sourceCoord.x, y: this.sourceCoord.y };\n        return this.constructor.diagonal(o, o);\n      });\n\n    linkEnter.attr(\"d\", d => this.constructor.diagonal(d, d.parent));\n\n    // exit\n    linkSelection\n      .exit()\n      .attr(\"d\", () => {\n        const o = { y: this.sourceCoord.y, x: this.sourceCoord.x };\n        return this.constructor.diagonal(o, o);\n      })\n      .remove();\n  }\n}\n\nexport default TreeChart;\n","import d3 from \"./d3imports\";\nimport \"./CategoryTimeline.css\";\n\nclass CategoryTimeline {\n  constructor(data, svgElement, config) {\n    this.config = {\n      width: config.width ? config.width : 400,\n      height: config.height ? config.height : 200,\n      posX: config.posX ? config.posX : 0,\n      posY: config.posY ? config.posY : 0,\n      scaleStartDate: config.scaleStartDate\n        ? config.scaleStartDate\n        : new Date(\"1987-01-01\"),\n      scaleEndDate: config.scaleEndDate ? config.scaleEndDate : new Date(),\n      xAxisOrientation: config.xAxisOrientation\n        ? config.xAxisOrientation\n        : \"bottom\",\n      showXAxis: config.showXAxis != null ? config.showXAxis : true,\n      showLegend: config.showLegend != null ? config.showLegend : true,\n      categories: config.categories\n        ? config.categories\n        : [\n            { en: \"parents\", fi: \"vanhemmat\" },\n            { en: \"subjects\", fi: \"kohorttilaiset\" }\n          ],\n      cohorts: config.cohorts ? config.cohorts : [\"1987\", \"1997\"],\n      lang: config.lang ? config.lang : \"en\"\n    };\n    this.data = this.constructor.prepareData(data, this.config);\n\n    this.xAxisPadding = 30;\n\n    this.svg = svgElement\n      .append(\"g\")\n      .attr(\"class\", \"timeline-chart\")\n      .attr(\"width\", this.config.width)\n      .attr(\"height\", this.config.height + this.xAxisPadding)\n      .attr(\"transform\", `translate(${this.config.posX}, ${this.config.posY})`);\n\n    this.x = d3\n      .scaleTime()\n      .domain([this.config.scaleStartDate, this.config.scaleEndDate])\n      .range([0, this.config.width - 100]);\n\n    this.y = d3\n      .scaleBand()\n      .domain(this.config.categories.map(category => category.en))\n      .range([this.xAxisPadding, this.config.height])\n      .paddingInner(0.1)\n      .round(true);\n\n    this.cohortNum = this.config.cohorts.length;\n    this.cohortHeight = this.y.bandwidth() / this.cohortNum;\n  }\n\n  static prepareData(data, config) {\n    const timelineData = [];\n    config.categories.forEach(category => {\n      timelineData.push({\n        category,\n        data: data.filter(el => el.category.en === category.en)\n      });\n    });\n\n    return timelineData;\n  }\n\n  static findEarliestStartDate(dataArr) {\n    return d3.min(dataArr, el => new Date(el.startDate));\n  }\n\n  static findLatestEndDate(dataArr) {\n    return d3.max(dataArr, el => new Date(el.endDate));\n  }\n\n  static createYearLabel(d) {\n    const startDate = new Date(d.startDate);\n    const endDate = new Date(d.endDate);\n    const startMonth = startDate.getMonth();\n    const endMonth = endDate.getMonth();\n    const startYear = startDate.getFullYear();\n    const endYear = endDate.getFullYear();\n\n    const startStr =\n      startMonth === 0 ? startYear : `${startMonth + 1}/${startYear}`;\n    const endStr =\n      endMonth === 11 ? endYear : `${endDate.getMonth() + 1}/${endYear}`;\n\n    if (startYear === endYear) {\n      if (startMonth === endMonth) {\n        return startStr;\n      }\n      if (startMonth === 0 && endMonth === 11) {\n        return startYear;\n      }\n    }\n\n    return `${startStr}—${endStr}`;\n  }\n\n  drawXAxis() {\n    let xAxis;\n    if (this.config.xAxisOrientation === \"top\") {\n      xAxis = d3.axisTop(this.x);\n    } else {\n      xAxis = d3.axisBottom(this.x);\n    }\n\n    xAxis.ticks(d3.timeYear.every(10));\n\n    this.svg\n      .append(\"g\")\n      .attr(\"class\", \"timeline__axis\")\n      .call(xAxis)\n      .attr(\"transform\", () => {\n        if (this.config.xAxisOrientation === \"top\") {\n          return \"translate(0, -2.5)\";\n        }\n        return `translate(0, ${this.config.height - this.xAxisPadding + 2.5})`;\n      });\n  }\n\n  drawLegend() {\n    const legend = this.svg.append(\"g\").attr(\"class\", \"legend\");\n    legend.attr(\"transform\", `translate(${this.config.width - 90}, 0)`);\n\n    this.config.cohorts.forEach((cohort, idx) => {\n      const category = legend\n        .append(\"g\")\n        .attr(\"class\", \"legend__category\")\n        .attr(\"transform\", `translate(0, ${idx * this.cohortHeight})`);\n\n      category\n        .append(\"rect\")\n        .attr(\"class\", `fill-color-${idx + 1}`)\n        .attr(\"width\", this.cohortHeight)\n        .attr(\"height\", this.cohortHeight);\n\n      category\n        .append(\"text\")\n        .attr(\"class\", \"legend__label\")\n        .text(cohort)\n        .attr(\n          \"transform\",\n          `translate(${this.cohortHeight + 5}, ${this.cohortHeight - 5})`\n        );\n    });\n  }\n\n  calculateScaleBoundDates(startDateStr, endDateStr) {\n    let startDate = new Date(startDateStr);\n    let endDate = new Date(endDateStr);\n    const { scaleStartDate, scaleEndDate } = this.config;\n    // NOTE: handle cases where time sections go out of scales\n    if (startDate < scaleStartDate) {\n      startDate = scaleStartDate;\n    } else if (startDate > scaleEndDate) {\n      startDate = scaleEndDate;\n    }\n\n    if (endDate > scaleEndDate) {\n      endDate = scaleEndDate;\n    } else if (endDate < scaleStartDate) {\n      endDate = scaleStartDate;\n    }\n\n    return [startDate, endDate];\n  }\n\n  calculateSectionWidth(sectionData) {\n    const [startDate, endDate] = this.calculateScaleBoundDates(\n      sectionData.startDate,\n      sectionData.endDate\n    );\n\n    return this.x(endDate) - this.x(startDate);\n  }\n\n  calculateSectionXPos(sectionData) {\n    const startDate = this.calculateScaleBoundDates(sectionData.startDate)[0];\n\n    return this.x(startDate);\n  }\n\n  positionYearLabel(d) {\n    if (\n      new Date(d.endDate) < this.config.scaleStartDate ||\n      new Date(d.startDate) > this.config.scaleEndDate\n    ) {\n      // if section is out of scales, throw the label way off screen\n      return `translate(${1000}, ${this.cohortHeight - 4})`;\n    }\n\n    const [startDate, endDate] = this.calculateScaleBoundDates(\n      d.startDate,\n      d.endDate\n    );\n    const xStart = this.x(startDate);\n    const xEnd = this.x(endDate);\n    let xCentre = (xStart + xEnd) / 2 - 2;\n\n    const xEndScale = this.x(this.config.scaleEndDate);\n    const limit = 20;\n    const offset = 15;\n\n    xCentre = xCentre < limit ? xCentre + offset : xCentre;\n    xCentre =\n      Math.abs(xCentre - xEndScale) < limit ? xCentre - offset : xCentre;\n\n    return `translate(${xCentre}, ${this.cohortHeight - 4})`;\n  }\n\n  moveTo(x, y) {\n    this.svg.attr(\"transform\", `translate(${x}, ${y})`);\n  }\n\n  update() {\n    if (this.config.showXAxis) {\n      this.drawXAxis();\n    }\n    if (this.config.showLegend) {\n      this.drawLegend();\n    }\n    // enter\n    const categoryEnter = this.svg\n      .selectAll(\".timeline\")\n      .data(this.data)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"timeline\");\n\n    categoryEnter.attr(\n      \"transform\",\n      d => `translate(0, ${this.y(d.category.en) - this.xAxisPadding})`\n    );\n\n    this.config.categories.forEach((category, i) => {\n      if (i < this.config.categories.length - 1) {\n        categoryEnter\n          .filter(d => d.category.en === category.en)\n          .append(\"line\")\n          .attr(\"class\", \"timeline__separator\")\n          .attr(\"x1\", this.x(this.config.scaleStartDate) - 60)\n          .attr(\"y1\", this.y.bandwidth() + 0.075 * this.y.bandwidth())\n          .attr(\"x2\", this.x(this.config.scaleEndDate))\n          .attr(\"y2\", this.y.bandwidth() + 0.075 * this.y.bandwidth());\n      }\n    });\n\n    categoryEnter\n      .append(\"text\")\n      .attr(\"class\", \"timeline__title\")\n      .text(d => d.category[this.config.lang])\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"dy\", this.y.bandwidth() / 2 + 5)\n      .attr(\"dx\", \"-1.5em\");\n\n    const sectionEnter = categoryEnter\n      .selectAll(\"timeline__section\")\n      .data(d => d.data)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"timeline__section\");\n\n    // enter timespan sections => rectangles\n    sectionEnter\n      .filter(\n        d =>\n          new Date(d.startDate).getFullYear() !==\n          new Date(d.endDate).getFullYear()\n      )\n      .append(\"rect\")\n      .attr(\"class\", \"timeline__rect\")\n      .attr(\"x\", d => this.calculateSectionXPos(d))\n      .attr(\"height\", this.cohortHeight)\n      .attr(\"width\", d => this.calculateSectionWidth(d));\n\n    // enter point sections => circles\n    sectionEnter\n      .filter(\n        d => new Date(d.startDate).getTime() === new Date(d.endDate).getTime()\n      )\n      .append(\"circle\")\n      .attr(\"r\", d => {\n        if (\n          new Date(d.startDate) < this.config.scaleStartDate ||\n          new Date(d.endDate) > this.config.scaleEndDate\n        ) {\n          return 0;\n        }\n        return this.cohortHeight / 2;\n      })\n      .attr(\"class\", \"timeline__rect\")\n      .attr(\"cx\", d => this.calculateSectionXPos(d))\n      .attr(\"cy\", this.cohortHeight / 2);\n\n    sectionEnter\n      .append(\"text\")\n      .attr(\"class\", \"timeline__year-label\")\n      .text(d => this.constructor.createYearLabel(d))\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", d => this.positionYearLabel(d));\n\n    // move cohorts to \"own lanes\"\n    this.config.cohorts.forEach((cohort, idx) => {\n      sectionEnter\n        .filter(d => d.cohort === cohort)\n        .attr(\"transform\", `translate(0, ${this.cohortHeight * idx})`)\n        .select(\".timeline__rect\")\n        .attr(\"class\", `timeline__rect fill-color-${idx + 1}`);\n    });\n  }\n}\n\nexport default CategoryTimeline;\n","import CategoryTimeline from \"./d3Visualizations/CategoryTimeline\";\n\nexport function parseNameFromFilename(filename) {\n  return filename.split(\".\")[0];\n}\n\nexport function calculateregisterDetailCount(data) {\n  let registerDetailCount = 0;\n  data.registers.forEach(register =>\n    register.registerDetails.forEach(() => (registerDetailCount += 1))\n  );\n  return registerDetailCount;\n}\n\nexport function categoryTimelineHelper(samplingData, svg, config) {\n  const timelineData = [];\n  config.categories.forEach(category => {\n    timelineData.push({\n      category,\n      data: samplingData.filter(el => el.category.en === category.en)\n    });\n  });\n\n  return new CategoryTimeline(timelineData, svg, config);\n}\n\n// forcedFirstStr is an optional string that forces a given name placed as\n// the first element of the array\nexport function compareByName(a, b, lang, forcedFirstStr) {\n  if (forcedFirstStr) {\n    if (a.name[lang] === forcedFirstStr[lang]) {\n      return -1;\n    }\n    if (b.name[lang] === forcedFirstStr[lang]) {\n      return 1;\n    }\n  }\n\n  if (a.name[lang] < b.name[lang]) {\n    return -1;\n  }\n  if (a.name[lang] > b.name[lang] || b.name[lang]) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function idRef(filename) {\n  return parseNameFromFilename(filename).replace(/ /g, \"\");\n}\n\nexport function sortTreeData(data) {\n  data.registers.sort((a, b) => compareByName(a, b));\n  data.registers.forEach(register =>\n    register.registerDetails.sort((a, b) => compareByName(a, b))\n  );\n  return data;\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport InfoBox from \"../InfoBox/InfoBox\";\n\nimport d3 from \"../_js/d3Visualizations/d3imports\";\n\nimport TreeChart from \"../_js/d3Visualizations/TreeChart\";\nimport CategoryTimeline from \"../_js/d3Visualizations/CategoryTimeline\";\nimport {\n  //sortTreeData,\n  calculateregisterDetailCount,\n  idRef\n} from \"../_js/helpers\";\n\nimport \"./TimelineTreeSVG.css\";\n\nclass TimelineTreeSVG extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hasManyCohortsSelected = Object.values(props.cohortFilter).filter(cohort => cohort.isSelected).length > 4\n\n    this.showInfoBox = this.showInfoBox.bind(this);\n    this.hideInfoBox = this.hideInfoBox.bind(this);\n    this.treeConfigDefault = {\n      width: 350,\n      height: 100,\n      posX: 125,\n      posY: 50,\n      childrenNames: [\"registers\", \"registerDetails\"],\n      nodeSize: 7.5\n    };\n    this.timelineConfigDefault = {\n      width: 250,\n      height: 100,\n      showXAxis: this.hasManyCohortsSelected ? true : false,\n      showLegend: this.hasManyCohortsSelected ? true : false,\n      xAxisOrientation: this.hasManyCohortsSelected ? \"top\" : \"bottom\",\n      scaleEndDate: new Date()\n    };\n    this.state = {\n      infoBoxes: []\n    };\n  }\n\n  // FIXME: could/should be broken into smaller pieces\n  componentDidMount() {\n    const { data: dataProp, lang } = this.props;\n    // NOTE: this makes sure that we are not modifying the original data in the App-component\n    const {\n      filename,\n      cohortFilter,\n      treeFilter,\n      treeConfig,\n      timelineConfig\n    } = this.props;\n\n    // ***** TreeChart *****\n    const selectedNodes = dataProp.registers\n      .filter(register => treeFilter[register.name.en].isSelected)\n      .map(register => ({ ...register }));\n    // NOTE: the map() above is important step! It replaces the reference to the original register with a copy.\n\n    selectedNodes.forEach(register => {\n      register.registerDetails = register.registerDetails\n        .filter(\n          registerDetail =>\n            treeFilter[register.name.en].registerDetails[registerDetail.name.en]\n              .isSelected\n        )\n        .map(registerDetail => ({ ...registerDetail }));\n    });\n\n    const selectedCohorts = Object.values(cohortFilter).filter(\n      cohort => cohort.isSelected\n    );\n    const cohortNum = selectedCohorts.length;\n    const categoryTimelineHeight = 2 * (20 * cohortNum) + 30;\n\n    const data = { ...dataProp, registers: selectedNodes };\n    // data = sortTreeData(data);\n    const registerDetailCount = calculateregisterDetailCount(data);\n    const treeHeight = registerDetailCount * categoryTimelineHeight;\n    this.treeConfigDefault.height = treeHeight;\n\n    const treeConfigExtended = { ...this.treeConfigDefault, ...treeConfig };\n\n    const svg = d3\n      .select(`.js-timeline-tree#${idRef(filename)}`)\n      .attr(\"height\", treeHeight + 100)\n      .attr(\"width\", 1050);\n\n    const treeChart = new TreeChart(data, svg, treeConfigExtended);\n    treeChart.updateNodes();\n    treeChart.updateLinks();\n\n    // ***** Timelines *****\n    const timelineConfigCohorts = {\n      height: categoryTimelineHeight,\n      width: 350,\n      cohorts: selectedCohorts.map(cohort => cohort.name)\n    };\n    const timelineConfigExtended = {\n      ...this.timelineConfigDefault,\n      ...timelineConfig,\n      ...timelineConfigCohorts\n    };\n\n    if (treeChart.treeData.children) {\n      treeChart.treeData.children.forEach((registerNode, registerIdx) => {\n        const { infoBoxes } = this.state;\n        registerNode.children\n          .filter(node => node.data.notes[lang] !== \"\")\n          .forEach(node =>\n            infoBoxes.push({\n              isShown: false,\n              text: node.data.notes,\n              x: node.y,\n              y: node.x\n            })\n          );\n        this.setState({ infoBoxes });\n\n        registerNode.children.forEach(\n          (registerDetailNode, registerDetailIdx) => {\n            let timelineConfigModified = timelineConfigExtended;\n\n            if (registerIdx === 0 && registerDetailIdx === 0) {\n              timelineConfigModified = {\n                ...timelineConfigExtended,\n                showXAxis: true,\n                showLegend: true,\n                xAxisOrientation: \"top\"\n              };\n            }\n\n            const filteredCohortData = registerDetailNode.data.samplings.filter(\n              sampling => cohortFilter[sampling.cohort].isSelected\n            );\n            const categoryTimeline = new CategoryTimeline(\n              filteredCohortData,\n              svg,\n              timelineConfigModified\n            );\n            // NOTE: the tree structure kind of swaps x and y coords\n            categoryTimeline.moveTo(\n              registerDetailNode.y + 300,\n              registerDetailNode.x + 50 + 10 - categoryTimelineHeight / 2\n            );\n            categoryTimeline.update();\n          }\n        );\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const { filename } = this.props;\n    const nodeToEmpty = document.querySelector(\n      `.js-timeline-tree#${idRef(filename)}`\n    );\n    while (nodeToEmpty.firstChild) {\n      nodeToEmpty.removeChild(nodeToEmpty.firstChild);\n    }\n  }\n\n  showInfoBox(idx) {\n    const { infoBoxes } = this.state;\n    infoBoxes[idx].isShown = true;\n    this.setState({ infoBoxes });\n  }\n\n  hideInfoBox(idx) {\n    const { infoBoxes } = this.state;\n    infoBoxes[idx].isShown = false;\n    this.setState({ infoBoxes });\n  }\n\n  render() {\n    const { infoBoxes } = this.state;\n    const { filename, lang } = this.props;\n\n    const infoBoxEls = infoBoxes\n      .filter(infoData => infoData.isShown)\n      .map(infoData => {\n        const styles = {\n          position: \"absolute\",\n          left: `${infoData.x + 125}px`,\n          top: `${infoData.y + 60}px`,\n          width: \"175px\"\n        };\n        return (\n          <InfoBox\n            layoutStyles={styles}\n            key={`${Object.values(infoData).join(\"\")}Els`}\n          >\n            {infoData.text[lang]}\n          </InfoBox>\n        );\n      });\n\n    const infoBoxBtns = infoBoxes.map((infoData, idx) => {\n      const styles = {\n        position: \"absolute\",\n        left: `${infoData.x + 200}px`,\n        top: `${infoData.y + 32}px`\n      };\n\n      return (\n        <img\n          key={`${Object.values(infoData).join(\"\")}Btns`}\n          style={styles}\n          className=\"openInfoBtn\"\n          src=\"assets/material-info-gray.svg\"\n          alt=\"cohort info\"\n          onMouseEnter={() => this.showInfoBox(idx)}\n          onMouseLeave={() => this.hideInfoBox(idx)}\n        />\n      );\n    });\n\n    return (\n      <div className=\"svgContainer\">\n        <svg id={idRef(filename)} className=\"js-timeline-tree timeline-tree\" />\n        {infoBoxBtns}\n        {infoBoxEls}\n      </div>\n    );\n  }\n}\n\nTimelineTreeSVG.propTypes = {\n  cohortFilter: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n  filename: PropTypes.string.isRequired,\n  lang: PropTypes.string.isRequired,\n  treeFilter: PropTypes.object.isRequired,\n  treeConfig: PropTypes.object.isRequired,\n  timelineConfig: PropTypes.object.isRequired\n};\n\nexport default TimelineTreeSVG;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport CardHeader from \"../CardHeader/CardHeader\";\nimport TimelineTreeSVG from \"../TimelineTreeSVG/TimelineTreeSVG\";\nimport \"../_css/card.css\";\nimport \"./TimelineTreeCard.css\";\n\nclass TimelineTreeCard extends Component {\n  constructor(props) {\n    super(props);\n    this.handleYearSelection = this.handleYearSelection.bind(this);\n    this.state = {\n      scaleYearsSlider: { min: 1900, max: 2018 },\n      scaleYears: { min: 1900, max: 2018 }\n    };\n  }\n\n  componentDidMount() {\n    const { timelineConfig } = this.props;\n    const startYear = timelineConfig.scaleStartDate.getFullYear();\n    const currentYear = new Date().getFullYear();\n    this.setState({ scaleYearsSlider: { min: startYear, max: currentYear } });\n    this.setState({ scaleYears: { min: startYear, max: currentYear } });\n  }\n\n  handleYearSelection(years, mode) {\n    const { scaleYearsSlider } = this.state;\n    switch (mode) {\n      case \"change\":\n        this.setState({ scaleYearsSlider: { min: years.min, max: years.max } });\n        break;\n      case \"afterChange\":\n        this.setState({ scaleYears: scaleYearsSlider });\n        break;\n      default:\n        console.log(\"no such event mode\");\n    }\n  }\n\n  render() {\n    const {\n      lang,\n      show,\n      filename,\n      data,\n      cohortFilter,\n      fileFilter,\n      treeConfig,\n      timelineConfig\n    } = this.props;\n\n    const { scaleYearsSlider, scaleYears } = this.state;\n    const scaleStartDate = new Date(`${scaleYears.min}-01-01`);\n    const scaleEndDate = new Date(`${scaleYears.max}-12-31`);\n    const timelineConfigExtended = {\n      ...timelineConfig,\n      scaleStartDate,\n      scaleEndDate\n    };\n\n    const classes = show\n      ? \"timeline-tree-wrapper card\"\n      : \" timeline-tree-wrapper card card--collapsed\";\n    const treeFilter = fileFilter.registers;\n    // NOTE: this key updates depending on the filter props to force remounting\n    // the TimelineTree with updated filters\n    // IDEA: proper solution probably might be to componenDidUpdate() in the svg-component?\n    const svgKey =\n      Object.values(treeFilter)\n        .map(\n          register =>\n            `${register.isSelected}${Object.values(register.registerDetails)\n              .map(registerDetail => registerDetail.isSelected)\n              .join(\"\")}`\n        )\n        .join(\"\") +\n      Object.values(cohortFilter)\n        .map(cohort => cohort.isSelected)\n        .join(\"\") +\n      scaleYears.min +\n      scaleYears.max +\n      lang;\n\n    const renderSVG = () => {\n      if (fileFilter.isSelected) {\n        return (\n          <TimelineTreeSVG\n            lang={lang}\n            data={data}\n            cohortFilter={cohortFilter}\n            treeFilter={treeFilter}\n            treeConfig={treeConfig}\n            timelineConfig={timelineConfigExtended}\n            filename={filename}\n            key={svgKey}\n          />\n        );\n      }\n      return null;\n    };\n    return (\n      <div className={classes}>\n        <CardHeader\n          lang={lang}\n          name={fileFilter.name}\n          selectedYears={scaleYearsSlider}\n          handleYearSelection={this.handleYearSelection}\n        />\n        {renderSVG()}\n      </div>\n    );\n  }\n}\n\nTimelineTreeCard.propTypes = {\n  lang: PropTypes.string.isRequired,\n  show: PropTypes.bool.isRequired,\n  filename: PropTypes.string.isRequired,\n  data: PropTypes.object.isRequired,\n  fileFilter: PropTypes.object.isRequired,\n  treeConfig: PropTypes.object.isRequired,\n  timelineConfig: PropTypes.object.isRequired\n};\n\nexport default TimelineTreeCard;\n","import React, { Component } from \"react\";\nimport update from \"immutability-helper\";\nimport SidePanel from \"../SidePanel/SidePanel\";\nimport TimelineTreeCard from \"../TimelineTreeCard/TimelineTreeCard\";\nimport \"./App.css\";\n\nclass App extends Component {\n  static checkURLParams(url) {\n    const langParam = url.searchParams.get(\"lang\");\n    const datasetParam = url.searchParams.get(\"ds\");\n    let lang = langParam || \"fi\";\n    let dataset = datasetParam || \"finnish-birth-cohorts\";\n    // defaults\n    if ([\"en\", \"fi\"].includes(langParam)) {\n      lang = langParam;\n    }\n    if ([\"finnish-birth-cohorts\", \"psycohorts\"].includes(datasetParam)) {\n      dataset = datasetParam;\n    }\n    window.history.pushState(null, \"\", `?lang=${lang}&ds=${dataset}`); // just changes the url to reflect the state\n    return { lang, dataset };\n  }\n\n  static initializeCohortFilter(cohorts) {\n    const cohortFilter = {};\n    cohorts.forEach(cohort => {\n      cohortFilter[cohort] = { isSelected: true, name: cohort };\n    });\n    return cohortFilter;\n  }\n\n  static initializeConfigs(dataset) {\n    let timelineConfig = {};\n    switch (dataset) {\n      case \"finnish-birth-cohorts\":\n        timelineConfig = {\n          cohorts: [\"1987\", \"1997\"],\n          scaleStartDate: new Date(\"1987-01-01\")\n        };\n        break;\n      case \"psycohorts\":\n        timelineConfig = {\n          cohorts: [\"1966\", \"1986\", \"1987\", \"1997\", \"2007\", \"FIPS-ADHD\", \"FIPS-ASD\", \"FIPS-Tourette\", \"FIPS-Conduct dis.\", \"FIPS-Anxiety\", \"FIPS-Depression\", \"FIPS-Schizophrenia\", \"FIPS-Bipolar\", \"FIPS-Learning dis.\", \"FIPS-OCD\", \"SSRI\"],\n          scaleStartDate: new Date(\"1966-01-01\")\n        };\n        break;\n\n      default:\n        console.log(\"Given dataset was not found!\");\n    }\n    return timelineConfig;\n  }\n\n  /*\n  keywords = {'lang1': [String], 'lang2', [String]...}\n  */\n  static initializeKeywordFilter(keywords) {\n    const keywordFilter = {};\n    Object.keys(keywords).forEach(lang => {\n      keywordFilter[lang] = {};\n      keywords[lang].forEach(keyword => {\n        keywordFilter[lang][keyword] = { isSelected: false };\n      });\n    });\n\n    return keywordFilter;\n  }\n\n  static initializeRegisters(\n    registrarData,\n    isSelected = true,\n    registerDetailsIsSelected = true\n  ) {\n    const registers = {};\n    registrarData.registers.forEach(register => {\n      registers[register.name.en] = {\n        name: { ...register.name },\n        isSelected,\n        keywords: { ...register.keywords },\n        registerDetails: this.initializeRegisterDetails(\n          register,\n          registerDetailsIsSelected\n        )\n      };\n    });\n    return registers;\n  }\n\n  static initializeRegisterDetails(registerData, isSelected = true) {\n    const registerDetails = {};\n    registerData.registerDetails.forEach(registerDetail => {\n      registerDetails[registerDetail.name.en] = {\n        name: { ...registerDetail.name },\n        isSelected,\n        keywords: { ...registerDetail.keywords }\n      };\n    });\n    return registerDetails;\n  }\n\n  constructor(props) {\n    super(props);\n    this.selectLang = this.selectLang.bind(this);\n    this.updateTreeFilterWithKeyword = this.updateTreeFilterWithKeyword.bind(\n      this\n    );\n    this.toggleCohortFilter = this.toggleCohortFilter.bind(this);\n    this.toggleFileFilter = this.toggleFileFilter.bind(this);\n    this.toggleKeywordFilter = this.toggleKeywordFilter.bind(this);\n    this.toggleRegisterFilter = this.toggleRegisterFilter.bind(this);\n    this.resetRegisterDetailFilters = this.resetRegisterDetailFilters.bind(\n      this\n    );\n    this.data = {};\n    this.keywords = {};\n    this.filenames = [];\n    this.state = {\n      dataset: \"\",\n      filterMode: \"manual\", // 'manual' or 'keywords'\n      lang: \"\",\n      cohortFilter: {},\n      keywordFilter: { en: [], fi: [] },\n      treeFilter: {},\n      treeConfig: {},\n      timelineConfig: {},\n      infoMsg: {\n        en:\n          \"Please select which register adminstrators you want to view from the panel on the left.\",\n        fi: \"Valitse haluttu rekisteriylläpitäjä paneelista vasemmalla.\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    // get starting parameters/configuration from the url\n    const url = new URL(window.location.href);\n    const { dataset, lang } = this.constructor.checkURLParams(url);\n    const timelineConfig = this.constructor.initializeConfigs(dataset, lang);\n    const cohortFilter = this.constructor.initializeCohortFilter(\n      timelineConfig.cohorts\n    );\n    fetch(`data/${dataset}/data_bundle.json`)\n      .then(res => res.json())\n      .then(dataBundle => {\n        this.data = dataBundle.data;\n        this.filenames = Object.keys(this.data);\n        this.keywords = dataBundle.keywords;\n        const keywordFilter = this.constructor.initializeKeywordFilter(\n          dataBundle.keywords\n        );\n        const treeFilter = this.initializeTreeFilter(this.filenames);\n        this.setState({\n          cohortFilter,\n          dataset,\n          keywordFilter,\n          treeFilter,\n          lang,\n          timelineConfig\n        });\n      });\n  }\n\n  selectLang(lang) {\n    const { dataset } = this.state;\n    this.setState({ lang });\n    // NOTE: update URL without reloading the page\n    window.history.pushState(null, \"\", `?lang=${lang}&ds=${dataset}`); // just changes the url to reflect the state\n  }\n\n  initializeTreeFilter(filenames, isSelected = true) {\n    const treeFilter = {};\n    filenames.forEach(filename => {\n      treeFilter[filename] = {\n        name: { ...this.data[filename].name },\n        isSelected: false,\n        keywords: { ...this.data[filename].keywords },\n        registers: this.constructor.initializeRegisters(\n          this.data[filename],\n          isSelected\n        )\n      };\n    });\n    return treeFilter;\n  }\n\n  // FIXME: should find a neater way to handle the treeData/filter\n  resetRegisterDetailFilters() {\n    const { treeFilter } = this.state;\n    const updatedTreeFilter = {};\n    const filenames = Object.keys(treeFilter);\n    filenames.forEach(filename => {\n      const registrar = treeFilter[filename];\n      const updatedRegistrar = {\n        ...registrar,\n        registers: {}\n      };\n      const registerNames = Object.keys(registrar.registers);\n      registerNames.forEach(registerName => {\n        const register = registrar.registers[registerName];\n        const updatedRegister = {\n          ...register,\n          registerDetails: {}\n        };\n        const registerDetailNames = Object.keys(register.registerDetails);\n        registerDetailNames.forEach(registerDetailName => {\n          const registerDetail = register.registerDetails[registerDetailName];\n          const updatedRegisterDetail = {\n            ...registerDetail,\n            isSelected: true\n          };\n          updatedRegister.registerDetails[\n            registerDetailName\n          ] = updatedRegisterDetail;\n        });\n        updatedRegistrar.registers[registerName] = updatedRegister;\n      });\n      updatedTreeFilter[filename] = updatedRegistrar;\n    });\n\n    this.setState({ treeFilter: updatedTreeFilter });\n  }\n\n  // NOTE: using immutability-helper to help updating nested states\n  toggleFileFilter(filename) {\n    const resetKeywordFilter = this.constructor.initializeKeywordFilter(\n      this.keywords\n    );\n    this.setState(prevState =>\n      update(prevState, {\n        treeFilter: { [filename]: { isSelected: { $apply: val => !val } } },\n        keywordFilter: { $set: resetKeywordFilter },\n        filterMode: { $set: \"manual\" }\n      })\n    );\n  }\n\n  toggleRegisterFilter(filename, registerName) {\n    const { filterMode } = this.state;\n    const resetKeywordFilter = this.constructor.initializeKeywordFilter(\n      this.keywords\n    );\n\n    if (filterMode === \"keywords\") {\n      this.resetRegisterDetailFilters(filename);\n    }\n\n    this.setState(prevState =>\n      update(prevState, {\n        treeFilter: {\n          [filename]: {\n            registers: {\n              [registerName]: {\n                isSelected: { $apply: val => !val }\n              }\n            }\n          }\n        },\n        keywordFilter: { $set: resetKeywordFilter },\n        filterMode: { $set: \"manual\" }\n      })\n    );\n  }\n\n  toggleCohortFilter(cohort) {\n    this.setState(prevState =>\n      update(prevState, {\n        cohortFilter: { [cohort]: { isSelected: { $apply: val => !val } } }\n      })\n    );\n  }\n\n  toggleKeywordFilter(keyword) {\n    const { lang, keywordFilter } = this.state;\n    const keywordIsSelected = keywordFilter[lang][keyword].isSelected;\n    const toggleKeywordIsSelected = !keywordIsSelected;\n    // set all keywords as unselected\n    Object.keys(keywordFilter[lang]).forEach(keywordKey => {\n      keywordFilter[lang][keywordKey].isSelected = false;\n    });\n    // set the clicked keyword with updated value\n    const updatedKeywordFilter = update(keywordFilter, {\n      [lang]: { [keyword]: { isSelected: { $set: toggleKeywordIsSelected } } }\n    });\n    const updatedTreeFilter = this.updateTreeFilterWithKeyword(\n      keyword,\n      toggleKeywordIsSelected\n    );\n    this.setState({\n      keywordFilter: updatedKeywordFilter,\n      treeFilter: updatedTreeFilter,\n      filterMode: \"keywords\"\n    });\n  }\n\n  // FIXME: quite an ugly function\n  updateTreeFilterWithKeyword(keyword, keywordIsSelected) {\n    const { lang } = this.state;\n    if (!keywordIsSelected) {\n      return this.initializeTreeFilter(this.filenames);\n    }\n    const updatedTreeFilter = this.initializeTreeFilter(this.filenames, false);\n    Object.keys(updatedTreeFilter).forEach(filename => {\n      const registrar = updatedTreeFilter[filename];\n      const registrarKeywordFound = registrar.keywords[lang].includes(keyword);\n      registrar.isSelected = registrarKeywordFound;\n      if (registrarKeywordFound) {\n        Object.keys(registrar.registers).forEach(registerName => {\n          const register = registrar.registers[registerName];\n          const registerKeywordFound = register.keywords[lang].includes(\n            keyword\n          );\n          register.isSelected = registerKeywordFound;\n          if (registerKeywordFound) {\n            Object.keys(register.registerDetails).forEach(detailName => {\n              const registerDetail = register.registerDetails[detailName];\n              const registerDetailKeywordFound = registerDetail.keywords[\n                lang\n              ].includes(keyword);\n              registerDetail.isSelected = registerDetailKeywordFound;\n            });\n          }\n        });\n      }\n    });\n    return updatedTreeFilter;\n  }\n\n  render() {\n    const {\n      cohortFilter,\n      keywordFilter,\n      treeFilter,\n      lang,\n      infoMsg,\n      treeConfig,\n      timelineConfig\n    } = this.state;\n\n    const timelineTreeCards = this.filenames\n      .map(filename => ({ filename, name: treeFilter[filename].name }))\n      .map(nameObj => {\n        const { filename } = nameObj;\n        const fileFilter = treeFilter[filename];\n        return (\n          <TimelineTreeCard\n            lang={lang}\n            show={treeFilter[filename].isSelected}\n            filename={filename}\n            data={this.data[filename]}\n            cohortFilter={cohortFilter}\n            fileFilter={fileFilter}\n            treeConfig={{ ...treeConfig, lang }}\n            timelineConfig={{ ...timelineConfig, lang }}\n            key={filename}\n          />\n        );\n      });\n\n    return (\n      <React.Fragment>\n        <SidePanel\n          lang={lang}\n          cohortFilter={cohortFilter}\n          keywordFilter={keywordFilter}\n          treeFilter={treeFilter}\n          selectLang={this.selectLang}\n          toggleCohortFilter={this.toggleCohortFilter}\n          toggleFileFilter={this.toggleFileFilter}\n          toggleKeywordFilter={this.toggleKeywordFilter}\n          toggleRegisterFilter={this.toggleRegisterFilter}\n        />\n        <div className=\"content-wrapper\">\n          <div className=\"sidebar-placeholder\" />\n          <main className=\"chart-area\">\n            <h2 className=\"info-header\">{infoMsg[lang]}</h2>\n            {timelineTreeCards}\n          </main>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}